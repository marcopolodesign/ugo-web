// let url = 'http://localhost:1337';
let url = 'https://u-go-backend-deveop-lc9t2.ondigitalocean.app';
let user;
const HPavailability = [];

async function createAccount(email, password) {
    const response = await fetch(`${url}/users`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        // 'Authorization': `Bearer ${authToken}`,
      },
      body: JSON.stringify({
        username: 'delfiquetto',
        identifier: email,
        email: email,
        password: password,
      }),
    });
  
    if (response.ok) {
      alert('Account created successfully');
      console.log(response)
      // Redirect or perform other actions as needed
    } else {
      alert('Account creation failed');
      // Handle error response
    }
}

async function logIn(email, password) {
    const response = await fetch(`${url}/auth/local`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        identifier: email,
        password: password,
      }),
    });
  
    if (response.ok) {
      const data = await response.json();
      console.log('User profile', data.user);
      console.log('User token', data.jwt);
      console.log(response);
      const jwtToken = localStorage.setItem('jwtToken' , data.jwt);
    localStorage.setItem('savedUser', JSON.stringify(data.user));
      window.location.href = '/portal';
      // Redirect or perform other actions as needed
    } else {
      console.error('Login failed');
      // Handle error response
      const errorData = await response.json();
      console.log(errorData);
      alert('Login failed: ' + errorData.message);
    }
}


function logOut() {
// Clear the JWT token from localStorage
localStorage.removeItem('jwtToken');

// Redirect to /sign-in
window.location.href = '/sign-in';
}

const logoutButton = document.getElementById('log-out');

const loadUser = async () => {
    let userID = localStorage.getItem('savedUser');
    userID ? userID = userID = JSON.parse(userID) : window.location.href = '/sign-in';
    // console.log(userID._id);

    const response = await fetch(`${url}/users/${userID._id}`);
    if (response.ok) {
         user = await response.json();
        getDogs(user);
        userHeader(user);
        userInfo(user);
        newReserve(user);
        newDogInputs(user);
        console.log(user);
        console.log(user.dogs[1])
    }
   
}

const getDogs = async (user) => {
    if (user && user.dogs) {
    // console.log(user)
      
    var requestOptions = {
        method: 'GET',
        redirect: 'follow', 
      
      };

      let reserves  = await fetch (`${url}/reserves-hps?[owner][$eq]=${user.id}&_sort=aob_date_start:asc`, requestOptions).then(response => response.json())
    //   console.log('User has reserves:',reserves);

      // Populate the dog list 
        let dogList = document.querySelector('.pets-container-inner');
        user.dogs = user.dogs.reverse()

        let reserveList = document.querySelector('.new-reserve-list');

        await fillDogs(user.dogs, dogList);

        uploadDogImage(); 
     
        await fillReserves(reserves, reserveList);

        // Retrieve data from /reserves-hps endpoint
        let response = await fetch(`${url}/reserves-hps?[owner_email][$eq]=${user.email}`);
        const data = await response.json();

        var foundDog = user.dogs.find(function(dog) {
            return dog.name === data[0].dog_name;
        });


        if (response.ok && !localStorage.getItem('imported-dogs') && !foundDog) {
            // Check if user's email matches owner_email in the response
            const reservations = data.filter((reservation) => reservation.owner_email === user.email);
            console.log('Reservations:', reservations);

            document.querySelector('.p-d-content').innerHTML =  
            `<h3 class="hp-yellow f2 faro">${reservations[0].dog_name}</h3>
            <p class="hp-yellow">${reservations[0].dog_genre}, ${reservations[0].dog_age} ${Number(reservations[0].dog_age) > 1 ? 'años' : 'año'}</p>`
            
            hpReserveDog(reservations[0]);
      } 
      
        // Get old Reserves
        if (response.ok && !localStorage.getItem('imported-reserves')) {
            const reservations = data.filter((reservation) => reservation.owner_email === user.email);
            // console.log('Reservations:', reservations);

        //    (fillReserves(reservations, reserveList));    
        }

   
    } else {
      console.log('User does not have dogs');
    }
};

let addedStartDates = []; // Array to store the added start dates

const fillReserves = async (reserves, list) => {
    reserves.forEach(reserve => {
        console.log(reserve)
        let dogImage = reserve.dog.avatar ? reserve.dog.avatar.url : "/wp-content/uploads/2022/08/Rectangle-861.jpg";

        const result = calculateDates(reserve.aob_date_start, reserve.aob_date_end);
        let dogName = reserve.dog.name;

        // console.log(reserve.dog.name)

        // if (!addedStartDates.includes(result.startDate)) {
        let previousReserve = `
            <div class="hp-reserve-item hp-br hp-teal-bg pa3 w-100 mb4" >
                <div class="hp-reserve-header flex jic">
                    <div class="flex jic">
                        <div class="relative reserve-img cover bg-center" style="background-image: url('${dogImage}')"></div>
                        <h2 class="faro ml1 ttc">${dogName}</h2>
                        <h5 class="ttu ml3 reserve-status ph2 pv1 lausanne lh1 hp-teal" style="background-color: #4F4483; font-size: 11px; border-radius: 2px;padding-top: 5.2px;">${reserve.aob_purchased}</h5>
                    </div>
                    ${ (reserve.aob_purchased != 'COMPLETADO') ? 
                     `<div class="edit-reserve" reserve="${reserve._id}">
                        <p>Editar</p>
                    </div>` : ''
                    }
                </div>

                <div class="flex reserve-dates mv3">
                    <div class="flex flex-column hp-teal">
                        <p class="lh1">Desde</p>
                        <h2 class="hp-teal lh1 f2">${result.startDate}—</h2>
                    </div>
                    <div class="flex flex-column hp-teal">
                        <p class="lh1">Hasta</p>
                        <h2 class="hp-teal lh1 f2">${result.endDate}</h2>
                </div>
                </div>
                <p class="white">Total a pagar por ${result.diffDays} noches ${formatPrice(reserve.aob_price)}</p>

            </div>
        `
        addedStartDates.push(result.startDate);

        // Make an if statement checking if the reserve.aob_date_end is in the past
        console.log(new Date(reserve.aob_date_end) < new Date())
        if (new Date(reserve.aob_date_end) < new Date()) {
            document.querySelector('.old-reservations-inner').innerHTML = document.querySelector('.old-reservations-inner').innerHTML + previousReserve;
        } else {
            list.innerHTML = list.innerHTML + previousReserve;
        }
        

    })
}

const fillDogs = async (dogs, list) => {
    dogs.forEach(dog => {        

        let newDog;
        if (!dog.avatar) {
             newDog = 
             `<div class="pet-container no-image pa4 mb4 relative hp-br overflow-hidden hp-dark-color-bg"}>
                <div class="relative z-3">

                <form id="imageForm" class="flex flex-column justify-center">
                <label for="imageInput" class="custom-image-input flex flex-column justify-center items-center">
                <svg id="imagePreview" class="m-auto" width="265" height="283" viewBox="0 0 265 283" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M229.718 83.2513C231.038 83.1313 232.218 83.0713 233.398 82.9213C234.978 82.7213 235.978 83.4713 236.268 84.9213C236.518 86.2213 236.478 87.5813 236.498 88.9213C236.518 90.5113 236.578 92.1213 236.408 93.6913C236.118 96.2713 235.758 98.8513 235.188 101.371C235.048 102.001 234.058 102.621 233.318 102.911C230.858 103.881 228.328 104.701 225.668 105.631C225.828 108.781 226.938 111.721 228.878 114.351C230.498 116.541 231.998 118.761 232.188 121.621C232.308 123.511 231.928 125.241 230.638 126.631C226.868 130.711 222.288 132.751 216.748 131.281C215.018 130.821 213.388 129.551 212.018 128.311C210.598 127.021 209.548 125.311 208.118 123.501C207.338 124.961 206.298 126.221 205.978 127.641C205.328 130.511 204.868 133.451 204.678 136.381C204.138 144.481 209.538 149.421 217.108 150.261C218.588 150.421 219.998 150.601 220.768 148.841C221.308 147.621 222.378 146.751 222.148 145.091C221.488 140.301 223.438 136.571 227.468 134.011C228.418 133.411 229.708 133.141 230.858 133.091C233.018 132.991 234.488 134.471 234.458 136.621C234.438 138.141 234.148 139.651 234.008 140.891C235.958 140.801 238.058 140.371 240.048 140.671C244.108 141.281 245.388 145.061 242.868 148.331C241.558 150.021 239.868 151.171 237.838 151.701C234.658 152.531 231.428 153.211 228.078 153.981C228.798 156.241 229.948 158.771 227.788 161.101C225.888 163.141 223.438 163.821 220.608 164.061C221.038 164.261 221.448 164.571 221.898 164.641C224.688 165.061 226.868 166.251 228.668 168.601C229.648 169.881 229.808 171.011 229.848 172.391C230.048 179.601 227.598 185.701 222.838 191.151C219.058 195.481 214.608 198.891 209.958 202.111C206.698 204.361 202.848 205.071 198.978 205.301C195.938 205.481 192.868 205.411 189.818 205.351C188.658 205.331 187.648 205.461 186.798 206.321C186.488 206.641 186.098 206.881 185.738 207.151C181.198 210.531 177.758 209.981 174.588 205.241C170.768 206.991 166.918 208.761 162.978 210.561C162.978 211.651 163.078 213.031 162.958 214.391C162.778 216.361 161.768 217.961 160.388 219.361C159.958 219.791 159.718 220.411 159.298 220.861C159.038 221.141 158.628 221.381 158.268 221.421C157.578 221.491 156.868 221.351 156.178 221.391C153.688 221.541 151.138 222.151 148.728 221.781C146.518 221.441 144.798 219.701 143.968 217.441C142.688 213.961 143.378 210.671 145.388 207.731C146.518 206.071 148.108 204.731 149.468 203.261C148.508 203.181 147.268 203.071 146.028 202.981C138.838 202.461 131.658 201.961 124.468 201.431C118.478 200.991 112.498 200.491 106.508 200.081C103.258 199.861 100.008 199.831 96.7581 199.631C91.0681 199.281 85.3781 198.821 79.6881 198.491C77.3881 198.361 75.0881 198.151 72.8581 199.261C71.1781 200.101 69.2981 200.531 67.5981 201.121C67.7081 202.711 67.9781 204.291 67.8581 205.851C67.8081 206.581 67.1581 207.611 66.5181 207.901C64.1981 208.931 61.7981 209.871 59.3481 210.541C56.2481 211.391 53.6881 210.021 52.7381 206.961C52.1681 205.131 51.8681 203.161 51.8081 201.231C51.7281 198.911 52.3281 196.791 55.3581 196.421L55.1281 196.041C54.2181 196.041 53.3081 196.081 52.4081 196.041C48.4181 195.861 44.5781 194.661 41.9781 191.501C39.2981 188.251 36.9781 183.331 36.2581 179.171C35.4781 174.651 35.1381 169.831 36.7781 165.481C40.4881 155.591 45.7381 148.191 58.8081 147.231C61.3481 147.041 63.9081 147.011 66.4581 146.931C66.9481 146.921 67.5781 146.871 67.9081 147.131C68.6681 147.721 69.2081 147.281 69.9281 147.101C71.6981 146.661 72.1681 145.701 72.1381 143.921C72.1181 142.811 72.7781 141.491 73.5281 140.601C75.0081 138.861 75.7281 137.031 75.6981 134.721C75.6681 131.841 75.4581 129.041 74.5581 126.281C73.4281 122.831 73.3481 119.301 74.0781 115.751C74.1681 115.321 74.1781 114.871 74.2381 114.221C71.8181 115.921 69.5781 117.581 67.2581 119.111C63.4981 121.581 59.6981 124.021 55.8681 126.381C53.1081 128.081 50.1081 129.221 46.8481 129.421C45.4181 129.511 43.9381 129.421 42.5381 129.121C40.5481 128.681 39.7281 127.141 40.4781 125.231C40.9581 124.011 41.7081 122.811 42.5981 121.841C45.0881 119.161 48.2881 117.491 51.7881 116.701C59.3981 114.981 65.4481 110.661 71.1081 105.611C71.4781 105.281 71.8781 104.961 72.2181 104.601C80.1481 96.4213 90.0481 92.7313 101.208 92.3013C111.278 91.9113 121.368 92.0913 131.248 94.3813C135.708 95.4213 140.208 96.7613 144.288 98.7613C148.878 101.011 153.598 101.961 158.558 102.411C162.398 102.761 166.218 103.351 170.048 102.431C170.628 102.291 171.208 102.151 172.178 101.911C171.678 99.5113 171.268 97.1213 170.648 94.7913C170.268 93.3513 169.568 91.9913 168.978 90.6113C167.978 88.2913 167.938 85.9913 169.388 83.8813C171.918 80.2113 174.418 76.5213 177.178 73.0213C180.028 69.4013 183.678 67.3013 189.828 70.3013C190.288 70.5313 191.088 70.3813 191.608 70.1413C196.258 68.0413 201.098 66.6813 206.198 66.2613C209.538 65.9913 212.668 66.8513 215.688 68.1213C216.918 68.6413 218.058 68.7513 219.308 68.3513C219.828 68.1813 220.378 68.1013 220.928 68.0413C226.578 67.4113 228.938 70.3413 230.298 74.7013C231.178 77.5413 230.948 80.3213 229.768 83.2213L229.718 83.2513ZM172.538 104.011C167.378 105.561 162.698 105.051 158.008 104.631C152.898 104.181 147.918 103.491 143.318 100.851C141.008 99.5213 138.358 98.7013 135.778 97.9213C124.498 94.5013 112.878 94.2913 101.238 94.6813C94.8881 94.8913 88.6081 96.0013 83.0881 99.3213C79.7281 101.341 76.6181 103.861 73.6681 106.461C67.3681 112.011 60.8381 117.021 52.4181 118.941C49.3081 119.651 46.4381 121.071 44.2481 123.461C43.4981 124.281 43.1581 125.491 42.6381 126.521C43.6781 126.741 44.7281 126.951 45.7681 127.161C45.8581 127.181 45.9681 127.151 46.0681 127.141C48.7781 127.021 51.2981 126.231 53.6281 124.901C60.3881 121.071 66.8981 116.851 72.9781 112.001C74.6481 110.671 76.0681 108.991 77.7981 107.751C79.6981 106.391 81.7981 105.321 83.8681 104.231C84.2181 104.051 85.1881 104.271 85.2481 104.501C85.3881 104.971 85.2181 105.611 84.9881 106.081C84.8381 106.371 84.3181 106.461 83.9881 106.681C81.9881 107.991 79.9681 109.261 78.0281 110.661C77.5081 111.031 77.0881 111.751 76.9281 112.391C75.8181 116.751 75.0881 121.151 76.6781 125.541C77.7981 128.631 77.8281 131.811 77.9181 135.021C77.9881 137.721 77.1781 139.991 75.3481 142.001C74.7581 142.641 74.2381 143.681 74.2781 144.521C74.3781 146.651 74.6781 148.791 75.1581 150.871C75.4381 152.111 75.4981 152.981 73.9781 153.431C76.3581 155.101 78.8881 155.341 81.4881 155.401C81.6381 153.501 81.6881 151.751 81.9181 150.031C82.3681 146.741 84.2381 144.751 87.3981 143.571C90.9381 142.241 94.4581 140.701 97.7181 138.791C101.208 136.751 104.498 134.291 106.598 130.661C107.568 128.971 108.438 127.231 109.348 125.501C109.758 124.721 110.318 124.071 111.228 124.511C112.208 124.981 111.698 125.711 111.328 126.411C110.278 128.421 109.268 130.461 108.178 132.631C108.948 132.531 109.588 132.461 110.228 132.361C114.228 131.751 118.198 131.191 122.308 131.541C129.538 132.161 135.688 134.851 141.018 139.791C144.458 142.981 148.168 145.891 151.818 148.841C153.498 150.201 155.448 151.071 157.698 151.541C157.698 150.261 157.668 149.161 157.698 148.061C157.808 144.701 158.828 141.561 160.228 138.561C160.438 138.101 161.278 137.941 161.828 137.641C161.858 138.201 162.078 138.841 161.888 139.321C160.498 142.731 159.348 146.211 159.628 149.941C159.788 152.071 160.478 154.161 160.738 156.281C161.228 160.251 161.558 164.241 162.018 168.211C162.068 168.631 162.488 169.321 162.788 169.351C165.398 169.601 168.028 169.731 170.588 169.891C171.018 167.161 171.478 164.701 171.778 162.231C172.758 154.101 177.928 148.901 184.148 144.431C184.528 144.161 185.288 144.421 185.878 144.431C185.658 144.941 185.558 145.591 185.188 145.941C182.998 147.991 180.668 149.891 178.538 152.001C177.448 153.081 176.698 154.501 175.798 155.761L176.068 156.091C179.528 154.121 183.338 153.841 187.128 154.021C193.718 154.331 199.288 150.261 200.998 143.701C201.978 139.941 202.388 136.041 203.128 132.211C203.588 129.821 203.548 127.001 204.858 125.191C206.968 122.301 206.678 120.171 204.728 117.611C203.068 115.441 201.638 113.091 200.048 110.861C199.798 110.511 199.238 110.371 198.838 110.121C197.998 109.581 196.868 109.221 196.388 108.461C194.708 105.801 192.998 103.131 192.488 99.9213C192.258 98.5013 191.568 97.7913 189.988 98.2213C189.078 98.4713 188.108 98.4913 187.158 98.5813C186.288 98.6613 185.998 99.1013 185.998 99.9713C185.998 102.221 185.808 104.481 185.858 106.731C185.958 112.011 183.848 116.221 179.938 119.651C177.668 121.641 176.188 121.541 174.268 119.181C172.998 117.621 172.548 115.811 172.548 113.861C172.548 110.721 172.548 107.581 172.548 104.051L172.538 104.011ZM173.988 166.441C174.298 166.791 174.408 166.971 174.558 167.071C176.408 168.271 177.078 169.861 176.498 172.051C176.158 173.341 175.998 174.711 175.968 176.051C175.938 177.251 176.188 178.461 176.308 179.541C179.298 179.331 182.628 178.901 185.958 178.911C191.988 178.931 196.048 182.031 197.798 187.621C198.678 190.431 198.258 191.851 195.918 193.601C192.978 195.801 189.628 196.621 186.008 196.381C181.368 196.081 176.728 195.701 172.088 195.391C169.388 195.211 166.668 195.291 163.998 194.941C160.508 194.481 157.048 194.131 153.538 194.601C152.048 194.801 151.638 194.141 152.168 192.731C153.068 190.321 153.928 187.891 154.798 185.471C154.998 184.911 155.308 184.331 155.308 183.761C155.328 179.311 155.568 174.841 155.168 170.431C154.908 167.651 155.208 165.511 157.588 163.911C157.658 163.861 157.668 163.741 157.758 163.541C157.518 163.361 157.278 163.021 156.988 162.981C133.528 159.691 110.058 156.411 86.5181 153.131C86.7481 155.281 86.9681 157.111 87.1381 158.951C87.3081 160.761 87.4281 162.581 87.5981 164.681C89.3981 162.771 90.8681 160.951 91.8281 158.711C92.0181 158.261 92.7381 158.031 93.2081 157.691C93.3481 158.261 93.7581 158.951 93.5681 159.381C93.0281 160.661 92.3381 161.891 91.5581 163.041C90.8581 164.091 89.9681 165.021 89.0381 166.151C89.7381 166.151 90.1781 166.131 90.6281 166.151C94.1581 166.371 97.7881 166.171 101.208 166.901C108.628 168.491 110.988 172.331 110.828 178.591C110.788 180.121 111.378 181.861 109.888 183.221C107.418 185.481 104.808 187.441 101.478 188.241C95.7081 189.621 90.0381 189.061 84.4281 187.411C80.2081 186.171 76.0581 184.581 71.7681 183.741C66.4581 182.701 67.4481 181.851 63.8581 186.871C63.5681 187.271 62.8481 187.361 62.3181 187.591C62.2581 187.051 61.9681 186.391 62.1781 185.991C62.8181 184.761 63.6481 183.631 64.2181 182.771C64.2181 181.651 64.0381 180.771 64.2581 179.991C64.8781 177.801 66.0881 175.691 66.2981 173.481C66.6981 169.211 66.5381 164.891 66.6681 160.591C66.6881 159.991 66.8781 158.951 67.1581 158.891C69.0181 158.461 68.4381 157.131 68.2781 156.051C67.9381 153.701 67.4881 151.361 67.0181 148.701C64.4581 148.841 61.7681 148.891 59.0981 149.171C53.5081 149.761 48.4881 151.391 44.5981 155.961C41.0281 160.151 39.3681 164.981 40.1181 170.121C41.4781 179.461 47.1081 187.031 57.0681 189.371C61.7781 190.471 66.5081 191.611 71.2881 192.261C78.3181 193.211 85.3981 193.891 92.4781 194.411C98.4181 194.851 104.388 194.821 110.338 195.151C116.978 195.521 123.618 196.021 130.248 196.561C136.328 197.061 142.408 197.621 148.468 198.281C155.478 199.051 162.448 200.191 169.468 200.731C177.198 201.331 184.988 201.541 192.708 200.451C197.718 199.751 202.768 198.941 207.168 196.221C215.598 191.011 221.858 183.771 226.358 174.981C226.698 174.331 226.808 173.561 226.998 172.831C227.778 169.841 225.438 166.781 221.488 166.961C222.038 169.361 222.068 171.741 220.968 173.991C220.208 175.551 219.038 176.721 217.168 176.761C215.388 176.801 214.078 175.851 213.318 174.321C212.598 172.881 212.108 171.321 211.528 169.821C210.638 170.241 209.688 170.821 208.658 171.161C206.448 171.881 204.348 171.811 202.478 170.121C201.988 169.681 201.248 169.351 200.598 169.301C196.958 169.051 193.298 169.091 189.678 168.681C184.518 168.101 179.398 167.231 173.988 166.451V166.441ZM228.808 83.4213C227.198 82.0913 228.108 80.8713 228.248 79.6913C228.638 76.4913 228.018 73.5213 225.548 71.3413C223.498 69.5313 220.988 70.0813 218.718 70.9313C217.558 71.3613 216.718 71.3413 215.628 70.8413C212.758 69.5113 209.778 68.4013 206.538 68.6213C201.488 68.9613 196.708 70.3613 192.078 72.3713C191.178 72.7613 189.828 72.8013 188.958 72.4113C184.558 70.4113 181.888 70.7913 178.918 74.6013C176.308 77.9513 173.988 81.5313 171.558 85.0213C170.518 86.5113 170.438 88.0913 171.258 89.7113C173.218 93.5713 174.138 97.7213 174.468 101.991C174.788 106.131 174.808 110.281 175.138 114.421C175.228 115.591 175.898 116.751 176.468 117.811C176.608 118.071 177.638 118.211 177.908 117.981C180.678 115.691 182.808 112.951 183.208 109.221C183.398 107.481 183.508 105.731 183.568 103.981C183.718 99.3913 183.758 94.7913 183.948 90.2013C184.168 85.0613 186.308 80.8513 190.328 77.6113C191.018 77.0513 191.798 76.4513 192.568 77.2513C193.388 78.0913 192.678 78.7813 192.048 79.4113C191.088 80.3613 190.118 81.3013 189.218 82.3213C187.118 84.6913 186.678 87.6013 186.468 90.7513C187.518 90.5113 188.338 90.2913 189.168 90.1413C195.328 89.0513 201.488 87.9913 207.648 86.8813C209.748 86.5013 211.808 86.1413 213.828 87.6713C214.838 85.0713 216.918 84.6713 219.258 84.6513C220.298 84.6513 221.328 84.4213 222.598 84.2613C221.958 81.1213 220.928 78.2513 219.148 75.6813C218.678 75.0013 218.218 74.3713 218.968 73.7213C219.768 73.0213 220.528 73.4813 220.988 74.2013C221.658 75.2513 222.268 76.3513 222.748 77.5013C223.618 79.6013 224.378 81.7513 225.218 83.9513L228.818 83.4213H228.808ZM99.9881 143.981C101.618 143.851 103.148 143.691 104.688 143.621C105.768 143.571 106.408 144.141 106.698 145.241C107.218 147.161 107.618 149.171 108.518 150.901C109.228 152.261 110.448 153.971 111.748 154.291C116.008 155.351 120.398 155.901 124.748 156.541C132.518 157.681 140.298 158.741 148.078 159.821C151.768 160.331 155.458 160.811 159.478 161.341C159.058 158.811 158.698 156.501 158.248 154.211C158.198 153.941 157.638 153.721 157.278 153.561C155.228 152.661 153.008 152.041 151.158 150.841C147.048 148.171 143.208 145.121 139.778 141.561C134.748 136.321 128.378 134.011 121.228 133.441C116.368 133.051 111.668 134.221 106.908 134.731C106.548 134.771 106.178 135.031 105.878 135.271C104.258 136.601 102.678 138.001 101.038 139.311C98.7481 141.141 98.7281 141.121 99.9981 143.961L99.9881 143.981ZM220.218 129.181C219.518 128.511 219.088 128.101 218.648 127.691C218.208 127.291 217.738 126.911 217.298 126.501C215.838 125.141 215.798 123.671 217.528 122.671C219.718 121.401 222.048 120.291 224.428 119.431C226.398 118.721 227.548 119.701 227.448 121.831C227.378 123.441 227.008 125.031 226.768 126.641C229.248 125.341 230.298 123.291 229.528 120.721C229.118 119.361 228.448 118.001 227.588 116.871C225.058 113.551 223.538 109.881 223.088 105.741C223.038 105.291 222.828 104.781 222.528 104.431C221.158 102.851 219.728 101.301 218.308 99.7613C217.798 99.2013 217.248 98.6913 216.428 97.8613C216.428 99.5413 216.438 100.731 216.428 101.931C216.378 105.271 215.308 106.651 212.118 107.521C208.998 108.371 205.878 109.221 202.758 110.071C203.558 111.281 204.398 112.561 205.238 113.841C208.048 118.091 210.778 122.401 213.698 126.571C215.138 128.631 217.388 129.341 220.228 129.171L220.218 129.181ZM214.298 156.921C213.848 156.781 213.438 156.621 213.018 156.511C207.058 154.981 200.968 154.721 194.858 154.781C194.418 154.781 193.988 154.991 193.548 155.061C191.288 155.381 189.038 155.861 186.768 155.951C183.408 156.071 180.078 156.101 176.998 157.761C174.438 159.141 173.378 161.231 173.898 164.491C183.058 165.051 192.048 168.011 201.418 167.181C202.188 161.471 206.848 158.351 211.728 158.461C212.958 158.491 213.708 158.041 214.298 156.921ZM221.578 154.411L221.938 154.661C222.218 152.661 222.718 151.901 223.968 151.761C225.238 151.621 226.538 151.671 227.798 151.441C231.178 150.831 234.578 150.271 237.878 149.371C239.118 149.031 240.318 147.981 241.198 146.961C242.878 144.991 242.128 143.121 239.538 142.651C238.588 142.481 237.518 142.511 236.578 142.761C235.188 143.141 233.898 143.861 232.528 144.301C231.988 144.471 231.198 144.471 230.788 144.171C230.528 143.981 230.608 143.081 230.768 142.561C231.238 141.091 231.848 139.661 232.348 138.201C232.708 137.141 232.748 135.861 231.678 135.401C230.868 135.051 229.578 135.181 228.748 135.591C224.908 137.471 223.048 142.211 224.338 146.311C224.458 146.681 224.428 147.221 224.228 147.541C223.268 149.031 222.298 150.531 221.198 151.921C219.488 154.071 217.618 156.091 215.908 158.231C214.598 159.871 213.108 160.661 210.918 160.601C207.508 160.501 204.278 163.311 203.698 166.481C203.358 168.351 204.138 169.371 206.048 169.461C207.918 169.551 209.408 168.701 210.788 167.541C211.398 167.031 212.158 166.701 212.848 166.291C213.138 167.081 213.448 167.861 213.728 168.651C214.298 170.331 214.648 172.131 215.478 173.681C216.218 175.081 217.778 175.031 218.648 173.681C219.188 172.831 219.568 171.771 219.668 170.761C219.948 168.121 219.178 165.731 217.478 163.651C215.468 161.191 216.098 158.821 219.008 157.771C219.268 157.681 219.478 157.381 219.658 157.141C220.318 156.231 220.948 155.311 221.598 154.401L221.578 154.411ZM157.198 169.691C157.328 176.161 158.468 182.491 156.048 188.341C158.788 188.521 161.348 188.681 163.938 188.841C163.128 187.051 163.738 185.491 165.288 184.471C166.668 183.571 168.278 183.031 169.888 182.301C169.888 182.321 169.888 182.121 169.888 181.921C170.018 179.141 170.578 176.621 173.608 175.521C173.788 175.451 173.978 175.191 174.028 174.981C174.258 173.921 174.438 172.861 174.618 171.891C168.648 171.561 162.758 172.411 157.198 169.691ZM97.2781 182.101V182.131C97.9281 182.101 98.5981 182.161 99.2181 182.021C101.898 181.411 104.538 180.661 107.228 180.141C108.308 179.931 108.468 179.391 108.518 178.521C108.778 173.701 106.388 170.441 101.558 169.281C100.868 169.121 99.8781 169.371 99.2881 169.801C95.3681 172.671 94.6681 176.821 94.9781 181.301C94.9981 181.591 95.4581 181.981 95.7781 182.081C96.2381 182.211 96.7681 182.111 97.2681 182.111L97.2781 182.101ZM68.5481 163.481V176.111C69.5081 176.441 70.7681 177.201 72.0481 177.241C74.2781 177.301 76.5281 177.001 78.7581 176.701C80.9781 176.401 83.1981 173.911 83.6681 171.761C83.9881 170.271 84.6981 168.881 85.1181 167.411C85.3581 166.601 85.3681 165.721 85.4481 165.081C79.5281 167.211 74.1981 166.451 68.5481 163.481ZM38.0181 172.351C37.1481 176.961 38.6581 182.331 41.0381 186.271C43.2081 189.861 46.6081 192.891 50.7081 193.751C53.5481 194.351 56.4981 193.881 59.3981 193.941C62.2981 194.001 65.4681 194.771 67.1681 197.131L68.6281 193.961C64.8181 193.041 60.9281 192.511 57.1281 191.531C53.3381 190.551 49.5781 189.091 46.5981 186.551C44.4781 184.751 42.8381 182.471 41.4981 180.051C40.1381 177.591 39.3981 174.731 38.0081 172.351H38.0181ZM155.118 212.891C154.958 211.751 154.838 210.611 154.628 209.481C154.248 207.401 152.798 206.591 150.858 206.191C149.118 205.831 148.398 206.971 147.628 208.051C147.078 208.821 146.538 209.631 146.198 210.501C145.328 212.701 145.028 214.961 146.148 217.191C146.968 218.811 148.958 219.881 150.328 219.461C153.188 218.601 155.158 215.881 155.128 212.891H155.118ZM70.2981 152.851C70.2981 155.381 70.4681 157.771 70.2281 160.121C70.0881 161.451 70.5381 162.081 71.5581 162.561C74.8781 164.131 78.4081 164.271 81.9581 163.901C83.2881 163.761 84.9581 161.971 84.9881 160.951C85.0281 159.871 84.9881 158.791 84.9881 157.701C83.7181 157.611 83.8581 158.141 83.9481 158.901C84.0081 159.391 83.5681 159.941 83.3481 160.471C82.8081 160.121 82.1481 159.871 81.7781 159.381C81.4881 159.011 81.5681 158.351 81.4681 157.681C77.0481 157.571 73.0181 156.521 70.2981 152.851ZM195.598 188.161C195.258 185.301 191.678 181.541 188.968 181.291C188.198 181.221 187.208 181.461 186.608 181.921C183.508 184.331 182.448 187.731 182.198 191.551C187.178 192.091 191.288 189.701 195.598 188.161ZM203.528 142.671C202.508 146.751 200.738 150.101 197.458 152.931C198.608 152.931 199.398 152.851 200.168 152.941C204.778 153.471 209.398 153.961 213.988 154.641C216.128 154.961 216.958 154.691 217.898 152.451C211.528 151.701 206.248 149.291 203.528 142.661V142.671ZM191.738 202.781L191.908 203.441C193.098 203.441 194.288 203.471 195.478 203.441C201.208 203.241 206.658 202.381 211.398 198.631C215.378 195.481 219.278 192.331 222.448 188.321C224.558 185.651 226.208 182.781 227.058 179.481C227.138 179.161 227.138 178.821 227.178 178.491C223.318 185.071 218.178 190.431 212.438 195.261C206.508 200.251 199.148 201.581 191.748 202.791L191.738 202.781ZM79.4881 196.171L79.5481 196.451C103.728 198.001 127.898 199.561 152.078 201.111L152.118 200.711C146.768 200.151 141.418 199.511 136.058 199.061C130.778 198.611 125.478 198.361 120.188 197.981C114.398 197.561 108.628 197.001 102.838 196.661C95.9481 196.251 89.0481 195.991 82.1581 195.731C81.2781 195.701 80.3781 196.021 79.4881 196.181V196.171ZM69.9881 180.751C72.6181 181.471 75.2581 182.051 77.8081 182.911C83.6481 184.891 89.4781 186.831 95.7581 186.651C99.9081 186.531 103.768 185.621 107.178 182.371C105.448 182.861 104.078 183.291 102.688 183.621C98.8881 184.531 95.0581 184.231 91.1981 184.031C84.8381 183.701 78.7081 182.421 72.7581 180.231C71.6181 179.811 70.7781 179.771 69.9881 180.731V180.751ZM101.408 151.371C99.8381 148.111 98.3881 145.131 96.9181 142.071C95.4381 142.821 93.8181 143.641 92.2881 144.411C93.1681 146.741 94.0081 148.971 94.8681 151.181C95.0081 151.531 95.2381 152.051 95.5081 152.111C96.8681 152.401 98.2681 152.761 99.6281 152.691C100.298 152.661 100.918 151.751 101.408 151.371ZM61.2481 207.751C62.5081 207.281 63.5081 206.811 64.5681 206.531C65.8881 206.181 66.2981 205.301 65.9381 204.171C65.2481 201.991 64.4881 199.821 63.5681 197.721C62.9681 196.351 61.6281 196.001 60.2481 196.411C59.0381 196.771 57.8881 197.351 56.5981 197.881C59.5881 200.561 61.8381 203.401 61.2481 207.761V207.751ZM97.5881 168.471C96.0781 168.321 95.0881 168.141 94.1081 168.151C93.6281 168.151 92.9981 168.361 92.6881 168.701C90.9881 170.581 89.7181 172.711 89.3281 175.271C89.0181 177.311 88.7681 179.371 88.4681 181.501C89.8581 181.611 91.2581 181.721 92.8181 181.841C92.5381 176.701 93.0781 172.051 97.5981 168.471H97.5881ZM154.618 192.281C157.188 192.411 159.718 192.531 162.258 192.681C164.958 192.841 167.648 193.021 170.338 193.221C173.578 193.461 176.818 193.811 180.058 193.971C183.148 194.121 186.258 194.311 189.328 194.091C191.868 193.901 194.128 192.721 195.778 190.611C194.968 190.701 194.178 190.861 193.488 191.221C188.098 193.991 182.408 194.181 176.638 193.051C169.948 191.731 163.268 190.511 156.388 190.871C155.188 190.931 154.668 191.301 154.608 192.281H154.618ZM154.538 219.321C157.078 219.251 159.068 218.381 160.208 216.171C161.248 214.151 161.458 212.091 160.118 210.051C159.718 209.441 159.428 208.741 159.198 208.041C158.618 206.251 155.428 204.401 153.408 204.881C156.338 206.361 156.728 209.031 156.958 211.771C157.208 214.591 156.958 217.271 154.528 219.311L154.538 219.321ZM162.568 208.661L173.798 203.341L173.708 203.091C169.408 202.831 165.108 202.571 160.738 202.311C161.318 204.331 161.868 206.221 162.578 208.661H162.568ZM221.408 159.231C220.878 159.371 220.378 159.371 220.048 159.611C219.488 159.991 219.038 160.521 218.538 160.991C219.068 161.341 219.608 161.991 220.118 161.971C221.438 161.911 222.828 161.741 224.058 161.281C227.548 159.971 228.058 156.161 225.118 153.831C224.828 153.601 224.208 153.481 223.928 153.631C223.678 153.771 223.608 154.361 223.578 154.761C223.558 155.021 223.748 155.301 223.878 155.661C222.708 156.611 219.898 156.411 221.418 159.231H221.408ZM184.688 180.991C183.328 180.991 182.368 180.931 181.428 181.011C180.928 181.051 180.268 181.181 179.978 181.521C177.668 184.231 177.018 187.501 176.808 190.971C177.688 191.111 178.428 191.351 179.148 191.311C179.528 191.291 180.148 190.831 180.198 190.501C180.708 186.971 181.808 183.721 184.678 180.981L184.688 180.991ZM93.1281 151.721C92.2581 149.661 91.5481 147.871 90.7281 146.121C90.5681 145.781 89.9581 145.421 89.5881 145.441C86.6181 145.621 84.7181 147.471 84.1581 150.891C87.0281 151.161 89.8781 151.421 93.1281 151.721ZM54.3281 199.431C53.4281 201.331 53.7781 204.921 55.0481 207.151C55.6681 208.231 56.7481 208.931 57.7481 208.491C58.4981 208.151 59.1781 206.931 59.2981 206.031C59.5881 203.741 56.6081 200.001 54.3281 199.431ZM174.588 182.541L174.478 182.201C172.308 184.571 170.148 186.941 167.948 189.341L172.558 190.141C173.258 187.511 173.928 185.021 174.588 182.541ZM85.1481 180.951L85.4681 181.291C85.7481 181.081 86.1781 180.921 86.2881 180.641C86.6081 179.861 86.9381 179.041 87.0181 178.211C87.3481 174.691 87.9681 171.281 90.4781 168.441C88.9581 168.311 88.6081 168.511 87.7281 170.111C85.8681 173.491 85.7481 177.281 85.1581 180.951H85.1481ZM68.5481 198.881C71.3881 197.661 73.9181 196.571 76.4581 195.491L76.3081 195.061C74.3881 194.811 72.4781 194.561 70.6381 194.321L68.5481 198.881ZM83.1481 180.841L83.8581 176.121C81.7281 177.941 79.4281 178.931 76.7081 179.171C78.7681 179.711 80.8281 180.241 83.1481 180.851V180.841ZM184.788 205.151H177.058C178.238 207.911 181.678 208.011 184.788 205.151ZM100.688 145.891C101.558 147.311 102.228 148.401 103.168 149.931L105.108 145.881L104.698 145.451C103.478 145.581 102.248 145.711 100.688 145.881V145.891ZM105.778 149.441L102.908 153.131L107.628 153.771C106.988 152.281 106.428 150.961 105.778 149.441ZM156.768 167.261L159.928 168.621L159.628 164.791L156.768 167.261ZM171.878 181.141C172.528 180.691 173.178 180.431 173.538 179.951C173.918 179.451 174.078 178.751 174.228 178.111C174.248 178.021 173.538 177.591 173.468 177.651C172.978 178.081 172.428 178.551 172.158 179.121C171.898 179.671 171.968 180.371 171.868 181.131L171.878 181.141ZM169.388 184.901C167.278 185.001 166.078 185.891 165.668 187.551C167.448 187.411 168.248 186.121 169.388 184.901ZM72.9781 152.601L73.1381 152.471L72.0281 148.671C70.5581 149.051 70.3281 149.521 71.1481 150.531C71.7281 151.241 72.3681 151.911 72.9781 152.601ZM69.1081 178.731L67.0681 178.161L66.4981 180.651L69.0981 178.741L69.1081 178.731Z" fill="black"/>
                    <path d="M172.518 104.041C172.088 108.231 172.358 112.501 173.308 116.601C173.718 118.381 174.538 120.401 176.318 120.811C177.678 121.121 179.048 120.321 180.108 119.411C183.758 116.311 185.938 111.541 185.888 106.751C185.868 104.801 185.508 102.801 186.058 100.931C186.608 99.0613 188.518 97.3713 190.378 97.9613C192.558 98.6613 192.828 101.531 193.578 103.691C195.648 109.651 203.518 112.261 205.118 118.371C205.778 120.891 205.208 123.541 204.648 126.081L201.158 141.751C200.518 144.631 199.808 147.651 197.848 149.861C192.678 155.691 182.848 152.491 175.718 155.641L186.128 144.251C181.028 145.681 176.948 149.711 174.498 154.411C172.048 159.101 171.068 164.421 170.558 169.691C167.798 170.131 164.388 170.301 162.828 167.981C162.398 167.341 162.178 166.591 161.988 165.841C159.518 156.541 159.448 146.611 161.788 137.271C158.498 141.191 156.968 146.531 157.678 151.591C149.758 148.921 144.368 141.711 137.418 137.071C128.998 131.451 118.038 129.801 108.338 132.711L111.878 124.891C110.518 124.021 109.088 125.871 108.398 127.341C105.918 132.661 101.598 137.111 96.3483 139.741C92.7983 141.521 88.8283 142.521 85.6083 144.851C82.3883 147.181 80.0883 151.561 81.8083 155.141C79.1983 155.551 76.4483 155.001 74.1983 153.611C75.8183 151.591 74.4183 148.651 74.4183 146.051C74.4183 142.911 76.5783 140.211 77.4683 137.201C78.7683 132.791 77.2783 128.131 76.3483 123.631C75.4183 119.131 75.2783 113.861 78.5283 110.611C80.8883 108.251 84.9283 107.011 85.4183 103.711C73.5283 109.051 64.8883 120.091 52.9183 125.271C51.5283 125.871 42.1083 129.531 42.0183 126.601C41.9483 124.241 47.0883 121.391 48.7783 120.491C51.5583 119.001 54.5483 117.981 57.4483 116.781C63.6083 114.241 69.3683 110.711 74.4183 106.371C77.5383 103.691 80.4383 100.671 84.0483 98.7013C87.0883 97.0513 90.5083 96.2213 93.9183 95.6113C107.208 93.2513 121.028 94.0913 134.008 97.8113C146.708 101.451 159.848 107.851 172.488 104.041H172.518Z" fill="white"/>
                    <path d="M173.988 166.441C179.398 167.221 184.518 168.101 189.678 168.671C193.298 169.071 196.958 169.041 200.598 169.291C201.248 169.331 201.988 169.671 202.478 170.111C204.348 171.791 206.448 171.861 208.658 171.151C209.688 170.821 210.638 170.241 211.528 169.811C212.118 171.311 212.598 172.871 213.318 174.311C214.078 175.841 215.388 176.791 217.168 176.751C219.038 176.711 220.198 175.541 220.968 173.981C222.068 171.731 222.028 169.351 221.488 166.951C225.448 166.771 227.788 169.831 226.998 172.821C226.808 173.541 226.688 174.311 226.358 174.971C221.858 183.761 215.608 191.001 207.168 196.211C202.768 198.931 197.718 199.741 192.708 200.441C184.988 201.521 177.198 201.321 169.468 200.721C162.448 200.181 155.468 199.031 148.468 198.271C142.398 197.611 136.328 197.051 130.248 196.551C123.618 196.011 116.978 195.511 110.338 195.141C104.388 194.811 98.4184 194.841 92.4784 194.401C85.3984 193.881 78.3184 193.201 71.2884 192.251C66.5084 191.601 61.7784 190.471 57.0684 189.361C47.1084 187.031 41.4884 179.451 40.1184 170.111C39.3684 164.971 41.0284 160.141 44.5984 155.951C48.4884 151.381 53.5084 149.751 59.0984 149.161C61.7684 148.881 64.4584 148.841 67.0184 148.691C67.4784 151.351 67.9384 153.691 68.2784 156.041C68.4284 157.121 69.0184 158.451 67.1584 158.881C66.8684 158.951 66.6784 159.991 66.6684 160.581C66.5484 164.881 66.6984 169.201 66.2984 173.471C66.0884 175.681 64.8784 177.791 64.2584 179.981C64.0384 180.761 64.2184 181.641 64.2184 182.761C63.6584 183.631 62.8284 184.751 62.1784 185.981C61.9684 186.381 62.2584 187.041 62.3184 187.581C62.8384 187.351 63.5684 187.261 63.8584 186.861C67.4484 181.831 66.4484 182.681 71.7684 183.731C76.0584 184.571 80.2084 186.171 84.4284 187.401C90.0384 189.051 95.7084 189.611 101.478 188.231C104.808 187.431 107.418 185.471 109.888 183.211C111.368 181.851 110.788 180.121 110.828 178.581C110.998 172.321 108.628 168.491 101.208 166.891C97.7884 166.161 94.1584 166.351 90.6284 166.141C90.1784 166.111 89.7384 166.141 89.0384 166.141C89.9584 165.011 90.8484 164.081 91.5584 163.031C92.3284 161.881 93.0284 160.651 93.5684 159.371C93.7484 158.931 93.3384 158.251 93.2084 157.681C92.7384 158.011 92.0184 158.241 91.8284 158.701C90.8784 160.941 89.3984 162.761 87.5984 164.671C87.4284 162.571 87.3084 160.761 87.1384 158.941C86.9684 157.101 86.7484 155.271 86.5184 153.121C110.068 156.401 133.528 159.681 156.988 162.971C157.268 163.011 157.508 163.351 157.758 163.531C157.668 163.721 157.658 163.851 157.588 163.901C155.208 165.501 154.908 167.641 155.168 170.421C155.578 174.831 155.328 179.311 155.308 183.751C155.308 184.321 154.998 184.901 154.798 185.461C153.928 187.881 153.068 190.311 152.168 192.721C151.638 194.131 152.048 194.791 153.538 194.591C157.048 194.111 160.508 194.471 163.998 194.931C166.668 195.281 169.398 195.211 172.088 195.381C176.728 195.691 181.368 196.071 186.008 196.371C189.628 196.611 192.978 195.791 195.918 193.591C198.258 191.841 198.678 190.431 197.798 187.611C196.048 182.031 191.988 178.921 185.958 178.901C182.628 178.901 179.298 179.321 176.308 179.531C176.198 178.461 175.938 177.251 175.968 176.041C175.998 174.701 176.158 173.341 176.498 172.041C177.078 169.851 176.408 168.261 174.558 167.061C174.408 166.961 174.308 166.791 173.988 166.431V166.441ZM122.628 179.171C123.408 178.111 123.958 177.481 124.318 176.761C124.388 176.631 123.728 175.861 123.368 175.831C122.288 175.731 121.708 176.461 121.688 177.471C121.688 177.871 122.118 178.281 122.638 179.171H122.628ZM130.068 178.511L131.048 179.441C131.578 178.861 132.138 178.301 132.588 177.661C132.628 177.611 131.978 176.811 131.598 176.761C130.748 176.661 130.028 176.991 130.068 178.501V178.511ZM133.748 172.881V172.341C133.318 172.051 132.788 171.451 132.448 171.541C131.978 171.671 131.578 172.281 131.308 172.771C131.258 172.871 131.918 173.631 132.208 173.601C132.738 173.551 133.228 173.141 133.738 172.881H133.748ZM126.628 171.451C125.908 170.981 125.478 170.491 125.088 170.521C124.698 170.551 124.348 171.111 123.988 171.431C124.368 171.791 124.708 172.361 125.138 172.431C125.478 172.491 125.918 171.941 126.628 171.441V171.451Z" fill="black"/>
                    <path d="M228.808 83.4213L225.208 83.9513C224.378 81.7513 223.618 79.6013 222.738 77.5013C222.258 76.3513 221.648 75.2513 220.978 74.2013C220.518 73.4713 219.758 73.0113 218.958 73.7213C218.218 74.3713 218.668 75.0013 219.138 75.6813C220.918 78.2513 221.948 81.1213 222.588 84.2613C221.328 84.4213 220.288 84.6413 219.248 84.6513C216.918 84.6613 214.838 85.0613 213.818 87.6713C211.798 86.1413 209.728 86.5013 207.638 86.8813C201.478 87.9913 195.318 89.0513 189.158 90.1413C188.328 90.2913 187.508 90.5113 186.458 90.7513C186.678 87.6013 187.108 84.6913 189.208 82.3213C190.108 81.3113 191.078 80.3713 192.038 79.4113C192.668 78.7813 193.368 78.0913 192.558 77.2513C191.778 76.4613 191.008 77.0613 190.318 77.6113C186.308 80.8513 184.158 85.0713 183.938 90.2013C183.748 94.7913 183.708 99.3913 183.558 103.981C183.498 105.731 183.388 107.481 183.198 109.221C182.798 112.951 180.668 115.691 177.898 117.981C177.628 118.211 176.588 118.071 176.458 117.811C175.878 116.741 175.218 115.581 175.128 114.421C174.798 110.291 174.768 106.131 174.458 101.991C174.128 97.7213 173.218 93.5713 171.248 89.7113C170.428 88.0913 170.508 86.5113 171.548 85.0213C173.978 81.5313 176.298 77.9513 178.908 74.6013C181.878 70.7913 184.548 70.4013 188.948 72.4113C189.818 72.8113 191.168 72.7613 192.068 72.3713C196.708 70.3613 201.478 68.9613 206.528 68.6213C209.768 68.4013 212.748 69.5113 215.618 70.8413C216.708 71.3413 217.548 71.3613 218.708 70.9313C220.978 70.0813 223.488 69.5313 225.538 71.3413C228.008 73.5313 228.628 76.4913 228.238 79.6913C228.098 80.8713 227.188 82.0913 228.798 83.4213H228.808Z" fill="white"/>
                    <path d="M220.218 129.181C217.378 129.351 215.138 128.641 213.688 126.581C210.768 122.411 208.038 118.101 205.228 113.851C204.388 112.571 203.548 111.291 202.748 110.081C205.878 109.231 208.998 108.381 212.108 107.531C215.298 106.661 216.368 105.281 216.418 101.941C216.438 100.751 216.418 99.5513 216.418 97.8713C217.238 98.7013 217.788 99.2213 218.298 99.7713C219.718 101.311 221.138 102.861 222.518 104.441C222.818 104.781 223.028 105.291 223.078 105.751C223.528 109.891 225.048 113.561 227.578 116.881C228.438 118.011 229.108 119.371 229.518 120.731C230.298 123.301 229.248 125.341 226.758 126.651C226.998 125.041 227.358 123.451 227.438 121.841C227.538 119.721 226.388 118.731 224.418 119.441C222.038 120.301 219.708 121.411 217.518 122.681C215.798 123.681 215.828 125.141 217.288 126.511C217.728 126.921 218.198 127.301 218.638 127.701C219.078 128.101 219.508 128.521 220.208 129.191L220.218 129.181ZM221.168 113.381C220.388 112.851 219.928 112.311 219.608 112.381C219.158 112.481 218.808 113.041 218.418 113.411C218.758 113.751 219.108 114.361 219.448 114.361C219.898 114.361 220.348 113.881 221.168 113.381ZM217.078 110.821C216.628 111.491 216.118 111.931 216.198 112.211C216.308 112.611 216.808 113.051 217.228 113.151C217.448 113.201 218.078 112.541 218.068 112.231C218.048 111.831 217.558 111.461 217.088 110.831L217.078 110.821ZM219.468 109.271C219.028 109.891 218.538 110.281 218.578 110.601C218.618 110.941 219.158 111.451 219.478 111.461C219.788 111.461 220.318 110.921 220.348 110.581C220.378 110.261 219.898 109.881 219.458 109.271H219.468Z" fill="white"/>
                    <path d="M221.589 154.401C220.949 155.321 220.309 156.241 219.649 157.141C219.469 157.381 219.259 157.681 218.999 157.771C216.099 158.821 215.459 161.181 217.469 163.651C219.169 165.731 219.929 168.121 219.659 170.761C219.559 171.761 219.179 172.831 218.639 173.681C217.769 175.031 216.209 175.081 215.469 173.681C214.649 172.131 214.299 170.331 213.719 168.651C213.449 167.851 213.139 167.071 212.839 166.291C212.149 166.701 211.389 167.031 210.779 167.541C209.389 168.701 207.899 169.551 206.039 169.461C204.129 169.371 203.349 168.351 203.689 166.481C204.269 163.311 207.499 160.511 210.909 160.601C213.109 160.661 214.599 159.871 215.899 158.231C217.609 156.081 219.479 154.071 221.189 151.921C222.289 150.531 223.259 149.031 224.219 147.541C224.419 147.231 224.449 146.681 224.329 146.311C223.039 142.201 224.899 137.471 228.739 135.591C229.569 135.181 230.859 135.051 231.669 135.401C232.739 135.861 232.699 137.131 232.339 138.201C231.839 139.661 231.229 141.091 230.759 142.561C230.599 143.071 230.509 143.981 230.779 144.171C231.199 144.461 231.989 144.471 232.519 144.301C233.889 143.861 235.179 143.131 236.569 142.761C237.499 142.511 238.569 142.471 239.529 142.651C242.119 143.121 242.869 144.991 241.189 146.961C240.319 147.981 239.119 149.031 237.869 149.371C234.569 150.271 231.169 150.831 227.789 151.441C226.539 151.671 225.239 151.621 223.959 151.761C222.719 151.901 222.209 152.661 221.929 154.661L221.569 154.411L221.589 154.401Z" fill="white"/>
                    <path d="M157.199 169.681C162.759 172.411 168.649 171.551 174.619 171.881C174.439 172.851 174.259 173.911 174.029 174.971C173.989 175.171 173.799 175.441 173.609 175.511C170.569 176.611 170.009 179.131 169.889 181.911C169.889 182.111 169.889 182.311 169.889 182.291C168.289 183.031 166.669 183.561 165.289 184.461C163.739 185.481 163.129 187.041 163.939 188.831C161.349 188.661 158.789 188.501 156.049 188.331C158.469 182.481 157.329 176.151 157.199 169.681ZM167.109 179.791C167.089 178.041 165.959 176.871 164.339 176.931C162.519 176.991 160.779 178.871 160.809 180.751C160.839 182.351 161.989 183.501 163.559 183.491C165.499 183.491 167.129 181.781 167.109 179.791Z" fill="white"/>
                    <path d="M97.2885 182.091C96.7885 182.091 96.2585 182.191 95.7985 182.061C95.4685 181.971 95.0185 181.571 94.9985 181.281C94.6885 176.801 95.3885 172.651 99.3085 169.781C99.8885 169.351 100.888 169.101 101.578 169.261C106.408 170.421 108.798 173.671 108.538 178.501C108.488 179.371 108.328 179.921 107.248 180.121C104.558 180.641 101.908 181.391 99.2385 182.001C98.6185 182.141 97.9485 182.081 97.2985 182.111V182.081L97.2885 182.091Z" fill="white"/>
                    <path d="M68.5586 163.471C74.2086 166.441 79.5386 167.201 85.4586 165.071C85.3786 165.711 85.3586 166.581 85.1286 167.401C84.6986 168.871 83.9986 170.271 83.6786 171.751C83.2086 173.901 80.9886 176.381 78.7686 176.691C76.5486 176.991 74.2886 177.301 72.0586 177.231C70.7786 177.191 69.5186 176.431 68.5586 176.101V163.471ZM74.7186 172.251C74.7486 174.261 76.4486 175.821 78.5886 175.801C80.3386 175.781 81.5986 174.391 81.5486 172.521C81.5086 170.701 79.4986 168.761 77.6786 168.791C75.7486 168.821 74.6886 170.071 74.7186 172.251Z" fill="white"/>
                    <path d="M37.8184 171.971C39.0684 174.671 40.3684 177.911 42.0284 180.951C45.1784 186.721 50.4284 189.791 56.5984 191.391C59.9884 192.261 63.4484 192.841 66.8684 193.561C67.3984 193.671 67.9184 193.801 68.6584 193.961L67.1884 197.161C65.2284 194.571 62.4784 194.141 59.6784 193.951C58.2884 193.851 56.8684 193.891 55.4884 194.031C50.3684 194.571 45.8584 192.591 42.6984 188.451C38.7884 183.331 38.0584 178.231 37.8284 171.971H37.8184Z" fill="white"/>
                    <path d="M155.117 212.891C155.147 215.881 153.177 218.601 150.317 219.461C148.947 219.871 146.957 218.811 146.137 217.191C145.017 214.961 145.317 212.711 146.187 210.501C146.527 209.631 147.067 208.821 147.617 208.051C148.397 206.961 149.107 205.821 150.847 206.191C152.787 206.591 154.237 207.401 154.617 209.481C154.827 210.611 154.947 211.751 155.107 212.891H155.117Z" fill="white"/>
                    <path d="M70.2973 152.851C73.0173 156.521 77.0473 157.581 81.4673 157.681C81.5673 158.351 81.4873 159.011 81.7773 159.381C82.1473 159.861 82.8173 160.111 83.3473 160.471C83.5673 159.941 84.0073 159.391 83.9473 158.901C83.8573 158.141 83.7173 157.611 84.9873 157.701C84.9873 158.791 85.0173 159.871 84.9873 160.951C84.9473 161.961 83.2873 163.761 81.9573 163.901C78.4073 164.271 74.8773 164.131 71.5573 162.561C70.5373 162.081 70.0973 161.451 70.2273 160.121C70.4673 157.771 70.2973 155.381 70.2973 152.851Z" fill="white"/>
                    <path d="M195.597 188.161C191.287 189.701 187.177 192.101 182.197 191.551C182.447 187.731 183.517 184.331 186.607 181.921C187.207 181.451 188.197 181.221 188.967 181.291C191.677 181.541 195.257 185.301 195.597 188.161Z" fill="white"/>
                    <path d="M203.527 142.671C206.247 149.301 211.527 151.711 217.897 152.461C216.957 154.701 216.127 154.971 213.987 154.651C209.397 153.961 204.777 153.481 200.167 152.951C199.397 152.861 198.607 152.941 197.457 152.941C200.737 150.111 202.497 146.761 203.527 142.681V142.671Z" fill="white"/>
                    <path d="M191.739 202.781C199.139 201.571 206.489 200.241 212.429 195.251C218.169 190.421 223.309 185.061 227.169 178.481C227.129 178.811 227.139 179.151 227.049 179.471C226.199 182.771 224.549 185.641 222.439 188.311C219.279 192.321 215.369 195.471 211.389 198.621C206.649 202.371 201.199 203.231 195.469 203.431C194.279 203.471 193.089 203.431 191.899 203.431L191.729 202.771L191.739 202.781Z" fill="white"/>
                    <path d="M79.4883 196.161C80.3783 196.001 81.2683 195.681 82.1583 195.711C89.0583 195.971 95.9483 196.231 102.838 196.641C108.628 196.981 114.408 197.541 120.188 197.961C125.478 198.341 130.778 198.591 136.058 199.041C141.418 199.501 146.768 200.141 152.118 200.691L152.078 201.091C127.898 199.541 103.728 197.981 79.5483 196.431L79.4883 196.151V196.161Z" fill="white"/>
                    <path d="M69.9883 180.741C70.7783 179.781 71.6183 179.821 72.7583 180.241C78.7083 182.431 84.8383 183.711 91.1983 184.041C95.0583 184.241 98.8883 184.541 102.688 183.631C104.078 183.301 105.448 182.871 107.178 182.381C103.768 185.631 99.9083 186.541 95.7583 186.661C89.4783 186.841 83.6483 184.891 77.8083 182.921C75.2683 182.061 72.6283 181.481 69.9883 180.761V180.741Z" fill="white"/>
                    <path d="M101.397 151.361C100.907 151.751 100.287 152.651 99.6173 152.681C98.2573 152.751 96.8573 152.391 95.4973 152.101C95.2273 152.041 94.9973 151.521 94.8573 151.171C93.9873 148.951 93.1573 146.721 92.2773 144.401C93.7973 143.631 95.4273 142.811 96.9073 142.061C98.3873 145.121 99.8273 148.101 101.397 151.361Z" fill="white"/>
                    <path d="M61.2379 207.741C61.8379 203.381 59.5779 200.541 56.5879 197.861C57.8779 197.331 59.0179 196.741 60.2379 196.391C61.6079 195.991 62.9579 196.331 63.5579 197.701C64.4779 199.791 65.2279 201.971 65.9279 204.151C66.2879 205.291 65.8779 206.161 64.5579 206.511C63.4979 206.791 62.4979 207.261 61.2379 207.731V207.741Z" fill="white"/>
                    <path d="M97.5773 168.461C93.0673 172.041 92.5273 176.681 92.7973 181.831C91.2473 181.711 89.8373 181.601 88.4473 181.491C88.7373 179.361 88.9873 177.301 89.3073 175.261C89.6973 172.701 90.9673 170.571 92.6673 168.691C92.9773 168.351 93.6073 168.151 94.0873 168.141C95.0773 168.141 96.0573 168.311 97.5673 168.461H97.5773Z" fill="white"/>
                    <path d="M154.607 192.271C154.667 191.301 155.187 190.931 156.387 190.861C163.267 190.501 169.937 191.721 176.637 193.041C182.407 194.171 188.097 193.981 193.487 191.211C194.177 190.861 194.967 190.701 195.777 190.601C194.127 192.701 191.867 193.891 189.327 194.081C186.257 194.301 183.147 194.121 180.057 193.961C176.807 193.801 173.577 193.451 170.337 193.211C167.647 193.011 164.947 192.831 162.257 192.671C159.727 192.521 157.187 192.401 154.617 192.271H154.607Z" fill="white"/>
                    <path d="M154.518 219.311C156.948 217.261 157.198 214.591 156.948 211.771C156.708 209.041 156.318 206.371 153.398 204.881C155.418 204.401 158.598 206.251 159.188 208.041C159.418 208.741 159.708 209.441 160.108 210.051C161.438 212.091 161.238 214.151 160.198 216.171C159.058 218.381 157.078 219.251 154.528 219.321L154.518 219.311Z" fill="white"/>
                    <path d="M162.547 208.651C161.847 206.221 161.297 204.321 160.707 202.301C165.077 202.561 169.377 202.821 173.677 203.081L173.767 203.331L162.537 208.651H162.547Z" fill="white"/>
                    <path d="M221.388 159.231C219.868 156.411 222.678 156.611 223.848 155.661C223.718 155.301 223.528 155.021 223.548 154.761C223.578 154.361 223.648 153.771 223.898 153.631C224.188 153.471 224.798 153.601 225.088 153.831C228.028 156.151 227.508 159.961 224.028 161.281C222.798 161.741 221.418 161.911 220.088 161.971C219.578 161.991 219.038 161.341 218.508 160.991C219.008 160.521 219.468 159.991 220.018 159.611C220.358 159.381 220.848 159.371 221.378 159.231H221.388Z" fill="white"/>
                    <path d="M184.669 180.981C181.799 183.721 180.699 186.971 180.189 190.501C180.139 190.831 179.519 191.291 179.139 191.311C178.419 191.351 177.679 191.121 176.799 190.971C177.009 187.491 177.659 184.221 179.969 181.521C180.259 181.181 180.919 181.051 181.419 181.011C182.359 180.931 183.319 180.991 184.679 180.991L184.669 180.981Z" fill="white"/>
                    <path d="M54.308 199.431C56.588 200.001 59.568 203.741 59.278 206.031C59.168 206.931 58.488 208.151 57.728 208.491C56.728 208.941 55.638 208.231 55.028 207.151C53.748 204.921 53.408 201.331 54.308 199.431Z" fill="white"/>
                    <path d="M174.577 182.541C173.917 185.021 173.248 187.511 172.548 190.141L167.938 189.341C170.138 186.931 172.297 184.571 174.467 182.201L174.577 182.541Z" fill="white"/>
                    <path d="M85.1272 180.951C85.7172 177.271 85.8372 173.491 87.6972 170.111C88.5772 168.511 88.9272 168.311 90.4472 168.441C87.9372 171.281 87.3172 174.691 86.9872 178.211C86.9072 179.041 86.5772 179.861 86.2572 180.641C86.1372 180.921 85.7172 181.081 85.4372 181.291L85.1172 180.951H85.1272Z" fill="white"/>
                    <path d="M68.5273 198.871L70.6173 194.311C72.4573 194.551 74.3673 194.801 76.2873 195.051L76.4373 195.481C73.9073 196.571 71.3673 197.651 68.5273 198.871Z" fill="white"/>
                    <path d="M83.1275 180.831C80.8075 180.231 78.7475 179.691 76.6875 179.151C79.4075 178.921 81.7075 177.931 83.8375 176.101L83.1275 180.821V180.831Z" fill="white"/>
                    <path d="M184.767 205.141C181.657 208.001 178.217 207.901 177.037 205.141H184.767Z" fill="white"/>
                    <path d="M100.668 145.881C102.228 145.711 103.448 145.581 104.678 145.451L105.088 145.881L103.148 149.931C102.208 148.401 101.538 147.301 100.668 145.891V145.881Z" fill="white"/>
                    <path d="M105.759 149.441C106.409 150.961 106.969 152.281 107.609 153.771L102.889 153.131L105.759 149.441Z" fill="white"/>
                    <path d="M156.748 167.261L159.608 164.791L159.908 168.621L156.748 167.261Z" fill="white"/>
                    <path d="M171.857 181.141C171.947 180.381 171.887 179.681 172.147 179.131C172.417 178.551 172.957 178.091 173.457 177.661C173.527 177.591 174.237 178.021 174.217 178.121C174.067 178.761 173.907 179.451 173.527 179.961C173.157 180.441 172.517 180.701 171.867 181.151L171.857 181.141Z" fill="white"/>
                    <path d="M169.378 184.911C168.238 186.131 167.438 187.421 165.658 187.561C166.058 185.901 167.268 185.011 169.378 184.911Z" fill="white"/>
                    <path d="M72.9787 152.601C72.3687 151.911 71.7287 151.251 71.1487 150.531C70.3387 149.531 70.5587 149.051 72.0287 148.671L73.1387 152.471L72.9787 152.601Z" fill="white"/>
                    <path d="M69.1078 178.731L66.5078 180.641L67.0778 178.151L69.1178 178.721L69.1078 178.731Z" fill="white"/>
                    <path d="M122.628 179.181C122.108 178.291 121.678 177.881 121.678 177.481C121.698 176.481 122.268 175.741 123.358 175.841C123.718 175.881 124.378 176.641 124.308 176.771C123.948 177.491 123.398 178.111 122.618 179.181H122.628Z" fill="black"/>
                    <path d="M130.068 178.521C130.028 177.011 130.748 176.681 131.598 176.781C131.978 176.831 132.628 177.621 132.588 177.681C132.138 178.321 131.578 178.881 131.048 179.461L130.068 178.531V178.521Z" fill="black"/>
                    <path d="M133.748 172.891C133.238 173.151 132.748 173.561 132.218 173.611C131.928 173.641 131.258 172.881 131.318 172.781C131.588 172.291 131.988 171.681 132.458 171.551C132.798 171.461 133.328 172.061 133.768 172.351V172.891H133.748Z" fill="black"/>
                    <path d="M126.638 171.461C125.928 171.961 125.488 172.511 125.148 172.451C124.718 172.381 124.378 171.811 123.998 171.451C124.368 171.121 124.708 170.571 125.098 170.541C125.478 170.511 125.908 171.001 126.638 171.471V171.461Z" fill="black"/>
                    <path d="M221.168 113.371C220.348 113.871 219.898 114.351 219.448 114.351C219.098 114.351 218.758 113.741 218.418 113.401C218.808 113.041 219.158 112.481 219.608 112.371C219.928 112.301 220.388 112.841 221.168 113.371Z" fill="black"/>
                    <path d="M217.078 110.811C217.548 111.441 218.038 111.821 218.058 112.211C218.068 112.531 217.438 113.181 217.218 113.131C216.808 113.031 216.298 112.591 216.188 112.191C216.108 111.911 216.628 111.471 217.068 110.801L217.078 110.811Z" fill="black"/>
                    <path d="M219.459 109.261C219.899 109.871 220.379 110.251 220.349 110.571C220.309 110.911 219.789 111.451 219.479 111.451C219.149 111.451 218.619 110.931 218.579 110.591C218.539 110.271 219.019 109.881 219.469 109.261H219.459Z" fill="black"/>
                    <path d="M167.107 179.791C167.137 181.781 165.497 183.481 163.557 183.491C161.987 183.491 160.837 182.351 160.807 180.751C160.777 178.871 162.517 176.991 164.337 176.931C165.947 176.881 167.077 178.051 167.107 179.791ZM163.677 181.911C164.257 181.021 164.677 180.481 164.957 179.871C165.017 179.751 164.557 179.391 164.337 179.141C163.867 179.641 163.357 180.101 162.977 180.651C162.897 180.771 163.277 181.221 163.677 181.911Z" fill="black"/>
                    <path d="M74.7174 172.251C74.6874 170.071 75.7574 168.821 77.6774 168.791C79.4874 168.761 81.4974 170.701 81.5474 172.521C81.5874 174.391 80.3374 175.781 78.5874 175.801C76.4474 175.831 74.7474 174.271 74.7174 172.251ZM79.7474 173.041L79.8274 172.361C79.1674 171.931 78.5574 171.351 77.8374 171.151C77.5274 171.071 76.6774 171.741 76.6374 172.141C76.5174 173.231 77.3774 173.741 78.3274 173.771C78.7974 173.791 79.2774 173.291 79.7574 173.031L79.7474 173.041Z" fill="black"/>
                    <path d="M163.677 181.911C163.287 181.221 162.897 180.771 162.977 180.651C163.357 180.101 163.877 179.631 164.337 179.141C164.557 179.391 165.017 179.751 164.957 179.871C164.677 180.481 164.257 181.021 163.677 181.911Z" fill="white"/>
                    <path d="M79.7483 173.041C79.2683 173.301 78.7883 173.801 78.3183 173.781C77.3783 173.751 76.5083 173.231 76.6283 172.151C76.6783 171.761 77.5183 171.081 77.8283 171.161C78.5483 171.361 79.1683 171.941 79.8183 172.371L79.7383 173.051L79.7483 173.041Z" fill="white"/>
                    <circle cx="132.924" cy="132.508" r="131.073" stroke="#D9D9D9" stroke-width="2"/>
                    <circle cx="132.541" cy="263.99" r="18.8164" fill="#D9D9D9"/>
                    <path d="M132.924 257.75V271.412" stroke="black" stroke-width="2"/>
                    <path d="M139.754 264.581L126.093 264.581" stroke="black" stroke-width="2"/>
                    </svg>
                    <p>Agregar foto</p>
                </label>
                <input type="file" id="imageInput" class="o-0 image-input" data-dog-id=${dog.id}>
               
            </form>
                    <div class="pet-content">
                            <div class="pet-header relative flex flex-column justify-between">
                                <div class="flex flex-column justify-between h-100">
                                    <p class="tr o-0">Editar</p>
                                    <div class="pet-name">
                                        <h3 class="white f2 faro">${dog.name}</h3>
                                        <p>${dog.sex} ${dog.age} ${Number(dog.age) > 1 ? 'años' : 'año'}</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="pet-attributes flex flex-wrap items-center mt3">${dog.questions_values.map(attribute => `<p class="ttc">${attribute.slug}</p>`).join('')}</div>
                </div>
            </div>`
        } else {
         newDog = `
            <div class="pet-container pa4 mb4 relative hp-br overflow-hidden">
                <div class="relative z-3">
                    <div class="pet-content">
                            <div class="pet-header relative flex flex-column justify-between">
                                <div class="flex flex-column justify-between h-100">
                                    <p class="tr o-0 dn">Editar</p>
                                    <label for="imageInput" class="flex flex-column justify-between h-100 pointer">
                                    <p class="tr">Editar foto</p>
                                    </label>
                                    <input type="file" id="imageInput" class="o-0 image-input" data-dog-id=${dog.id}>
                                    <div class="pet-name">
                                        <h3 class="white f2 faro">${dog.name}</h3>
                                        <p>${dog.sex} ${dog.age} ${Number(dog.age) > 1 ? 'años' : 'año'}</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="pet-attributes flex flex-wrap items-center mt3">${dog.questions_values.map(attribute => `<p class="ttc">${attribute.slug}</p>`).join('')}</div>
                </div>
                
                <div class="absolute-cover bg-gradient" style="z-index: 2"></div>
                <div class="absolute-cover bg-center" style='background-image: url(${dog.avatar.url}'></div>
            </div>`
          }
            list.innerHTML = list.innerHTML + newDog;
        })
}

const newDogInputs = (user) => {

    document.querySelector('#new-pet').addEventListener('click', () => {
        document.querySelector('.new-dog-pop').classList.remove('dn');
        document.querySelector('.new-dog-pop').classList.add('flex');
    })

    let data;
    let socialContainer;
    let comida;
    let comments;

    let inputsContainer = document.querySelector('.new-dog-content');
    var requestOptions = {
        method: 'GET',
        redirect: 'follow'
      };


  fetch(`https://u-go-backend-deveop-lc9t2.ondigitalocean.app/inputs-web-dog`, requestOptions)
  .then(response => response.json())
  .then((response)=> {
     data = response;
    let inputs = response.inputDogs;
     comida = response.Comida;
     comments = response.Comentarios;
    inputs.map((i, index) => {
        let input;
        // console.log(i)
        if (i.type === "select" && i.placeholder != 'raza') {
            
            input = document.createElement('SELECT');

            let placeholder = document.createElement('OPTION')
            placeholder.setAttribute('selected', '');
            placeholder.setAttribute('disabled', '')
            if (i.placeholder === 'castrado') {
                placeholder.innerHTML = `Está ${i.placeholder}?`;
                input.classList.add('input-castrado')
            } else {
                placeholder.innerHTML = i.placeholder;
            }

            input.classList.add('input-text', `${i.placeholder}`);
            input.appendChild(placeholder);

            i.selectOptions.forEach((o, n) => {
                let option = document.createElement('OPTION')
                option.setAttribute('value', o.value);
                option.innerHTML = o.nombre;

                input.appendChild(option);
            })
            

        } else if (i.type === "date") {

            // Create a div insteado of an input 
            input = document.createElement('div');
            let dateInput = document.createElement('input');
            let celoCaption = document.createElement('p');

            celoCaption.innerHTML = i.placeholder;

            dateInput.setAttribute('type', i.type);
            dateInput.classList.add('input-text',)

            input.classList.add('o-0', 'pointers-none', 'celo-date', 'dn')

            input.appendChild(celoCaption);
            input.appendChild(dateInput);
        }
         else {
            input = document.createElement('INPUT');
            input.classList.add('input-text', `${i.placeholder}`);
        }

        input.setAttribute('type', i.type);


        input.setAttribute('placeholder', i.placeholder);
        input.setAttribute("required", "")

            
    inputsContainer.appendChild(input);
    })  
    }).then(() => {
        let healthContainer = document.createElement('div')
        let title = document.createElement("h2");
        title.classList.add('white');
        
        title.innerHTML = 'Y también sobre su salud:';

        healthContainer.appendChild(title)

        let dogHealth = data.healthDogs;
            dogHealth.forEach((h, i) => {
                let inputContainer = document.createElement('div');

                if (i <= 1) {
                inputContainer.classList.add('flex');
                inputContainer.classList.add('dog-checkbox')
    
                let inputText = document.createElement('p');
                inputText.innerHTML = h.question;
                inputText.classList.add('mr3');
    
                inputContainer.appendChild(inputText)
    
                let healthInput = document.createElement('input');
                healthInput.setAttribute('type', 'checkbox');
                healthInput.classList.add('input-checkbox');
                healthInput.required = true;
    
                inputContainer.appendChild(healthInput);
    
                healthContainer.appendChild(inputContainer);
            } else {
                inputContainer.classList.add('dog-textarea');
                let healthInput = document.createElement('input');
                healthInput.setAttribute('type', 'input');
                healthInput.placeholder = h.question;

                healthInput.classList.add('input-textarea', 'w-100', 'input-text');

                inputContainer.appendChild(healthInput);
                healthContainer.appendChild(inputContainer);
            }
            })
            
            inputsContainer.appendChild(healthContainer)    
    }).then(() => {

        let social = data.social

        socialContainer = document.createElement('div');
        socialContainer.classList.add('social-container');

        let title = document.createElement("h2");
        title.innerHTML = `Por último, algunas preguntas sobre su sociabilización`;

        inputsContainer.appendChild(title);

        let socialLevelContainer = document.createElement('div')
        socialLevelContainer.classList.add('social-level')

        let sectionTitle = document.createElement('p');
        sectionTitle.innerHTML = "¿Qué tan sociable es?";

        socialLevelContainer.appendChild(sectionTitle);

        let socialLevelInner = document.createElement('div');
        socialLevelContainer.appendChild(socialLevelInner);

        let socialResponses = [];

        social.forEach((level, i) => {
            let socialLevel = document.createElement('div')
            let grade = document.createElement('h4')
            socialLevel.appendChild(grade);
            grade.innerHTML = level.title;
            let caption = document.createElement("p");
            caption.innerHTML = level.desc;
            socialLevel.appendChild(caption);

            socialResponses.push(socialLevel);

            function toggleOpen() {
                this.classList.add('selected-social');
                socialResponses.forEach(res => {
                    if (res !== this) res.classList.remove('selected-social');
                });
            }

            socialResponses.forEach(res => {
                res.addEventListener('click', (toggleOpen))
            })


            socialLevelInner.appendChild(socialLevel);
        })
        socialLevelContainer.appendChild(socialLevelInner);
        socialContainer.appendChild(socialLevelContainer)
        inputsContainer.appendChild(socialContainer);


    }).then(() => {
        let behaviour = data.social_comportamiento

        behaviour.forEach((b, i) => {

        let behaviourContainer = document.createElement('div');
        behaviourContainer.classList.add('behaviour-container')

        if (i === 1 ) {
            behaviourContainer.classList.add('bite-container')
        }
        else if (i === 2) {
            behaviourContainer.classList.add('swim-container')
        }
        let behaviourTitle = document.createElement('p')

        behaviourTitle.innerHTML = b.questions;

        behaviourContainer.appendChild(behaviourTitle);

        let responsesContainer = document.createElement('div');

       let responses = [];
       b.options.map((response, index) => {
            let r = document.createElement("h4");
     
            r.classList.add('behaviour-type');
            r.innerHTML = response.value

            responsesContainer.appendChild(r);

            responses.push(r);
        
            function toggleOpen() {
                this.classList.add('selected');
                responses.forEach(res => {
                    if (res !== this) res.classList.remove('selected');
                });
            }

            responses.forEach(res => {
                res.addEventListener('click', (toggleOpen))
            })
           
       });

      behaviourContainer.appendChild(responsesContainer)
      socialContainer.appendChild(behaviourContainer);
      changeSelects();
    })



    aobContainer = document.createElement('div');
    aobContainer.classList.add('aob-container');

    let title = document.createElement("h2");
    title.innerHTML = `Otros datos sobre tu mascota!`;
    aobContainer.appendChild(title)


    let foodInput = document.createElement('input');
    foodInput.setAttribute('type', 'input');
    foodInput.placeholder = comida

    foodInput.classList.add('input-textarea', 'w-100', 'input-text');


    let commentsInput = document.createElement('input');
    commentsInput.setAttribute('type', 'input');
    commentsInput.placeholder = comments

    commentsInput.classList.add('input-textarea', 'w-100', 'input-text');


    aobContainer.appendChild(foodInput);
    aobContainer.appendChild(commentsInput);


    inputsContainer.appendChild(aobContainer)

      dogInputConditionals()
    }).catch(error => console.log('error', error));
    dogsInputs = true;


    const changeSelects = () => {
        document.querySelectorAll('select').forEach(s => {
            s.addEventListener('click' , ()=> {
                s.classList.add('selected')
            })    
        })
    
    }
    
    const dogInputConditionals = () => {
        let castradoTrigger = document.querySelector('.input-castrado');
    
        castradoTrigger.addEventListener('change', (e) => {
                if (e.target.value === 'no') {
                    document.querySelector('div.celo-date').classList.remove('o-0', 'pointers-none', 'dn')
                }
        })
    }
    // create the object for the dog

    let newDog;

    const createDog = async () => {
    console.log(newDog)

    var myHeaders = new Headers();
    myHeaders.append("Content-Type", "application/json");


    var requestOptions = {
    method: 'POST',
    headers: myHeaders,
    body: newDog,
    redirect: 'follow'
    };

    const response = await fetch(`${url}/dogs/`,requestOptions)
    
    if (response.ok) {
        let data = await response.json();
        console.log(data);
        console.log(newDog)

        document.querySelector('.new-dog-pop').classList.add('dn');
        document.querySelector('.new-dog-pop').classList.remove('flex');
        setTimeout(() => {
            window.location.reload();
        }, 1000);
    } else {
        const errorData = await response.json();
        console.log(errorData);
    }
    }

    document.querySelector('.submit-new-dog').addEventListener('click', ()=> {
        let hpQuestions = []

        // General Options

        document.querySelectorAll('.new-dog-content select').forEach(select => {
           
            const dogAttributes = {
                'title' : select.placeholder,
                'slug' : select.value,
                'type' : 'text',
            }

            hpQuestions.push(dogAttributes)
        })

        document.querySelectorAll('.dog-checbox').forEach(checkbox => {
            let input = checkbox.querySelector('input');
            const dogAttributes = {
                'title' : checkbox.querySelector('p').innerHTML,
                'slug' : input.value,
                'type' : boolean,
                'value' :  input.checked ? true : false
            }

            hpQuestions.push(dogAttributes)

        })


        document.querySelectorAll('.dog-textarea').forEach(option => {
            let input = option.querySelector('input');
            const dogAttributes = {
                'title' : input.placeholder,
                'slug' : input.value,
            }

            hpQuestions.push(dogAttributes)
        })

        // Social Options

        document.querySelectorAll('.social-container > div').forEach((option, i) => {

        let slug
            if (i === 0) {
                 slug = option.querySelector('[class*="selected"] p').innerHTML
            }   else {
                 slug = option.querySelector('[class*="selected"]').innerHTML
            }
        
          
            const dogAttributes = {
                'title' : option.querySelector('p').innerHTML,
                'slug' : slug,
                'type' : 'text',
            }

            hpQuestions.push(dogAttributes)
        })
        

        newDog = JSON.stringify({
            'name' : document.querySelector('.input-text.nombre').value,
            'age' : document.querySelector('.input-text.edad').value,
            'hp_questions' : hpQuestions,
            'sex' : capitalizeFirstLetter(document.querySelector('select.Género').value),
            'owner' : user.id
       })

       createDog(user);
    })
}

const userHeader = (user) => {
    let header = document.querySelector('header');
    // Delete the Reserve CTA
    let newHeaderLinks = document.createElement('div');
    newHeaderLinks.classList.add('new-header-links' , 'flex' , 'jic');

    // Create the userName element and add it to the header
    let userName = document.createElement('p');
    userName.innerHTML = `Hola ${user.first_name}!`;
    userName.classList.add('mr3', 'fw6');
    newHeaderLinks.appendChild(userName);

    // Create the logout button and add it to the header
    
    let logoutButton = document.createElement('p');
    logoutButton.innerHTML = 'Cerrar sesión';
    logoutButton.classList.add('no-deco', 'pointer', 'ml-2', 'desktop');
    newHeaderLinks.appendChild(logoutButton);

    logoutButton.addEventListener('click', logOut);

    header.appendChild(newHeaderLinks);

    header.querySelector('a.no-deco').innerHTML = ""
}

const userInfo = (user) => {
    let userInfoContainer = document.querySelector('.user-info-container');

    let userInfo = `
    <div class="hp-light-color-bg pa4 hp-br tc">
        <h2 class="ugo-pink mb3 f1 lh1">${user.first_name} ${user.last_name}</h2>
        <p class="black mb2">${user.email}</p>
        <p class="black mb2">${user.phone}</p>
        <p class="black mb1">${user.direccion}</p>
    </div>"`
    userInfoContainer.innerHTML = userInfo;
}


const hpReserveDog = (dog) => {

// Open pop up
document.querySelector('.previous-dogs-container').classList.remove('dn');

document.querySelector('.confirm-new-pd').addEventListener('click', () => {
    document.querySelector('.new-dog-pop').classList.remove('dn');
    document.querySelector('.new-dog-pop').classList.add('flex');

    // Populate the inputs
    document.querySelector('.input-text.nombre').value = dog.dog_name;
    document.querySelector('.input-text.edad').value = dog.dog_age;
    document.querySelector('.input-text.raza').value = dog.dog_raza;
    // Selects
    document.querySelector('select.Género').prepend(document.querySelector(`option[value="${dog.dog_genre}"]`))
    document.querySelector(`option[value="${dog.dog_genre}"]`).selected = true;
    document.querySelector('select.Género').setAttribute('placeholder',dog.dog_genre.toUpperCase());
    
    let castradoInput = document.querySelector('select.castrado');
    castradoInput.querySelector(`option[value="${dog.dog_castrado}"]`).selected = true;

    if (dog.dog_castrado === 'yes') {         
        castradoInput.setAttribute('placeholder', "Si");
    } else {
        castradoInput.setAttribute('placeholder', 'No')
    }

    // Check inputs
    if (dog.dog_deworming === 'true') {
        document.querySelectorAll('.input-checkbox')[0].checked = true
    }

    if (dog.dog_vaccine === 'true') {
        document.querySelectorAll('.input-checkbox')[1].checked = true
    } 
    
    // Textareas

    document.querySelectorAll('.dog-textarea input')[0].value = dog.dog_cirugia
    document.querySelectorAll('.dog-textarea input')[1].value = dog.dog_alergia

    let socialLevels = document.querySelectorAll('div.social-level > div > div ')
    // Social Levels
    let foundIndex = -1;
    socialLevels.forEach((div, index) => {
        const p = div.querySelector('p');
        if (p && p.innerText === dog.dog_social) {
            foundIndex = index;
            return; // Exit the loop if a match is found
        }

        });
    socialLevels[foundIndex].classList.add('selected-social')

    let searchWords = [`${dog.dog_behaviour}`, `${dog.dog_bite}`, `${dog.dog_swim}`]
    // AOB
    let behaviourContainers = document.querySelectorAll('.behaviour-container');

    behaviourContainers.forEach((bContainer, index) => {
        bContainer.querySelectorAll('h4').forEach(h => {
            console.log(h.innerText)
            const matchedWord = searchWords.find(word => h.innerText.toLowerCase().includes(word));
            console.log(matchedWord)
            if (matchedWord) {
                h.classList.add('selected')
            }
        })
    })

    if (dog.dog_bite) {
        document.querySelectorAll('.bite-container h4')[0].classList.add('selected')
    } else {
        document.querySelectorAll('.bite-container h4')[1].classList.add('selected')
    }

    if (dog.dog_swim) {
        document.querySelectorAll('.swim-container h4')[0].classList.add('selected')
    } else {
        document.querySelectorAll('.swim-container h4')[1].classList.add('selected')
    }
    
    document.querySelectorAll('.input-textarea')[2].value = dog.dog_food
    document.querySelectorAll('.input-textarea')[3].value = dog.comments
    
})

// Close the pop up
document.querySelector('.close-pdc').addEventListener('click', () => {
    document.querySelector('.previous-dogs-container').classList.add('dn');
    localStorage.setItem('imported-dogs', true)
})
}

const uploadDogImage = async () => {
    let inputContainer = document.querySelectorAll('.image-input');
    inputContainer.forEach((input, index) => {
        let indexInput = index;
        input.addEventListener('change', function(event) {
                const selectedFile = event.target.files[0];
                let dogId = event.target.getAttribute('data-dog-id')
                console.log(indexInput)
                console.log(dogId);
            
                if (selectedFile && dogId) {
            
                const formData = new FormData();
                formData.append('files', selectedFile);
                formData.append('ref', 'dog');
                formData.append('refId', dogId);
                formData.append('field', 'avatar'); // Replace 'image' with the actual field name for the image in your user model
            
                
                fetch(`${url}/upload`, {
                    method: 'POST',
                    body: formData,
                })
                    .then(response => response.json())
                    .then(result => {
                    // Handle the response and uploaded image data
                    console.log('Image uploaded:', result);
                    //reload the page
                    location.reload();

                    // Optionally, submit the form programmatically
                    //   document.getElementById('imageForm').submit();
                    })
                    .catch(error => {
                    // Handle any errors
                    console.error('Error uploading image:', error);
                    });
                }
            });
    })      
}


let enterDateES;
let exitDateES;

// let price = 5000;
let finalPricing;
let reserveInfo = {};

let selectedDog ;

const getSheet = () => {

    var url = `https://docs.google.com/spreadsheets/d/19iEmGbyUbuKp8hzt_GYNWlSs8KDcN3R-mt0Pftee3Og/gviz/tq?tqx=out:json&tq&gid=0`;
    fetch(url)
    .then(response => response.text())
    .then(data => {
    // Extract the JSON data using a regular expression pattern
    const match = data.match(/google\.visualization\.Query\.setResponse\((.*)\)/);
    
    if (match) {
      const jsonData = JSON.parse(match[1]);

      let HPdata = jsonData.table.rows;

      HPdata.forEach(dates => {
     
       let availability = dates.c
            const obj = {
                date: availability[0].v,
                price: availability[1].v
            };
            HPavailability.push(obj);
      })
      // Use the JSON data as needed
    } else {
      throw new Error('Unable to extract JSON data from the response.');
    }
  })
  .catch(error => {
    console.error('Error retrieving data:', error);
  });
}

const newReserve = async (user) => { 
    console.log(user)
    let newReservePop = document.querySelector('.new-reserve-pop');
    let isEditing = false;
  
    // let transportFare = 10000;

    const calendar = () => {
    
        let date = new Date();
    
        const elem = document.getElementById('range');
        const dateRangePicker = new DateRangePicker(elem, {
            datesDisabled: [0,2,4,6],
            daysOfWeekHighlighted: [1,3,5],
            language: "es",
            startView: 0,
            todayHighlight: true,
            weekStart: 1,
            minDate: date,
            clearBtn: true,
            format: ("dd/mm/yyyy")
        });
    
        let calInputs = document.querySelectorAll('#range input');
    
        let enterDate;
        let exitDate;
    
        getSheet();
        // console.log(HPavailability)
     
        calInputs.forEach(input => {
            input.addEventListener('changeDate', function (e, details) { 
                input.classList.remove('incomplete');
    
                // Grab initial dates
                enterDate = document.querySelectorAll('#range input')[0].value
                document.querySelector('#summary-start-date').innerHTML = enterDate;
                exitDate = document.querySelectorAll('#range input')[1].value
                document.querySelector('#summary-end-date').innerHTML = exitDate;
    
                // Translate to Spanish enterDate
                enterDateES = enterDate.split('/');
                enterDateES = enterDateES[1] + "/" + enterDateES[0] + '/' + enterDateES[2];
                enterDateES =  new Date(enterDateES);
    
    
                // Translate to Spanish exitDate
                exitDateES = exitDate.split('/');
                exitDateES = exitDateES[1] + "/" + exitDateES[0] + '/' + exitDateES[2];
                exitDateES =  new Date(exitDateES);
    
                console.log(exitDateES)

                if (isEditing) {
                    document.querySelector('.edit-summary-start-new p').innerHTML = enterDate;
                    document.querySelector('.edit-summary-end-new p').innerHTML = exitDate;
                }
    
                if (enterDate != exitDate) {
                    let difference = exitDateES.getTime() - enterDateES.getTime();
                    totalDays = Math.ceil(difference / (1000 * 3600 * 24));
                    
                    const matchingObject = HPavailability.find(item => item.date.toString() === exitDate);

                    // console.log(HPavailability[0].date)
                
                    function getDateRange(startDate, endDate) {
                        const dates = [];
                        let currentDate = new Date(startDate);
    
                        while (currentDate <= endDate) {
                            dates.push(currentDate.toLocaleDateString('en-US', { month: '2-digit', day: '2-digit', year: 'numeric' }));
                            currentDate.setDate(currentDate.getDate() + 1);
                        }
    
                        return dates;
                    }
    
                    const dateRange = getDateRange(enterDateES, exitDateES);
                    // console.log(dateRange);
        
                    // const matchedDate = HPavailability.find(item => item.date === dateRange);
    
                    console.log(HPavailability)
                    HPavailability.forEach(hpDate => {
                        var newPrice = 0;
                        if (dateRange.includes(hpDate.date)) {
                            if (hpDate.price > price) {
                                price = hpDate.price;
                            }
                            newPrice += hpDate.price;
                            console.log(newPrice)
                        }
                    })
    
        

                    // Get today's date
                    const today = new Date();
    
                    // Assuming the user-selected date is stored in the variable 'selectedDate'
                    // const selectedDate = ; // Replace with your actual variable
    
                    // Calculate the difference in days
                    const timeDifference = enterDateES.getTime() - today.getTime();
                    const daysDifference = Math.floor(timeDifference / (1000 * 60 * 60 * 24));
            
                    showPrice(price, totalDays, transportFare)
                }
                });
                
        })
    
        let isOpen = false;
        document.querySelectorAll('.datepicker').forEach((picker, index) => {
            let dates = picker.querySelectorAll('.datepicker-grid')
            dates.forEach(d => {
                d.addEventListener('click', ()=> {
                    if (isOpen) {
                        picker.classList.remove('active');
                        picker.style.left = '';
                        document.querySelectorAll('#range input')[index].classList.remove('in-edit')
    
                    } else {
                        picker.style.left = '315.102px';
                    }
                    isOpen = !isOpen;
                })
            })
        })
    }

    const selectDog = () => {
        const dogContainer = document.querySelector('.reserve-dog-selector');

        user.dogs.forEach(dog => {
            let dogDiv = document.createElement('div');
            dogDiv.classList.add('dog-selector', 'pa3', 'ugo-black-bg', 'hp-br', 'mr3', 'anchor', 'db', 'pointer');
            dogDiv.innerHTML = `
            <h2 class="white ttc">${dog.name}</h2>
            `
            dogDiv.addEventListener('click', () => {
                document.querySelector('#summary-dog-name').innerHTML = dog.name
                selectedDog = dog;
                console.log(selectedDog)
                document.querySelectorAll('.dog-selector').forEach(d => {
                    d.classList.remove('selected')
                })

                dogDiv.classList.add('selected')
            })
            dogContainer.appendChild(dogDiv);
        })
    }


    let formReserveStep = 0;
    if (user && user.dogs.length < 0) {
        selectedDog = user.dogs[0];
        console.log(selectDog)
        formReserveStep = 1;
        document.querySelector('#summary-dog-name').innerHTML = user.dogs[0].name
    } else {
        selectDog();
    }
    let reserveSteps = document.querySelectorAll('.reserve-steps-container > div');

    const stepsReserve = () => {
        // reserveSteps[formReserveStep].classList.remove('dn');
        reserveSteps.forEach((s,index) => {
            if (index === formReserveStep) {
                s.classList.remove('dn');
                if (reserveSteps === 1) {
                    s.classList.add('flex')
                }
            } else {
                s.classList.add('dn');
                s.classList.remove('flex')
            }
        })

    }



    const showPrice = (price, totalDays, transportFare) => {
        document.querySelector('.daily-price').innerHTML = formatPrice(price);

        document.querySelector('.title-nights').innerHTML = `${formatPrice(price)} por ${totalDays} noches`;
        document.querySelector('.price-nights').innerHTML = formatPrice(price * totalDays);
        document.querySelector('.price-transport').innerHTML = formatPrice(transportFare);
        document.querySelector('#grand-total').innerHTML = formatPrice((price * totalDays) + transportFare);

        document.querySelector('#grand-total').innerHTML = formatPrice((price * totalDays) + transportFare);
        document.querySelector('span#final-number-upfront').innerHTML = formatPrice(((price * totalDays) + transportFare) * 0.2);
        

        finalPricing = (price * totalDays) + transportFare;
        document.querySelector('#grand-total').innerHTML = formatPrice((price * totalDays) + transportFare);
        document.querySelector('#summary-nights').innerHTML = ` ${totalDays} noches`;
        document.querySelector('#summary-price').innerHTML = formatPrice((price * totalDays) + transportFare);


        allDays = totalDays;

        if (isEditing) {
            document.querySelector('.edit-summary-price p').innerHTML = formatPrice(finalPricing);
            document.querySelector('.edit-summary-days p').innerHTML = `${totalDays} noches`;
        }
    }


    calendar();
    stepsReserve();

   
    const discounts = () => {
        let promotions = [
            {name: 'MEJORESAMIGOS', discount : 15},
            {name: 'AMIGUIS', discount : 15},
            {name: 'PARAISO', discount : 20}
        ]
    
        let verify = document.querySelector('#discount-verify');
    
        verify.addEventListener('click', ()=> {
            let cupon = document.querySelector('.discount-code input').value.toUpperCase();
    
            const matchingProduct = promotions.find(product => product.name === cupon);
    
            if (matchingProduct) {
                let discount = matchingProduct.discount;
                // alert(`tenes un descuento de ${matchingProduct.discount}`)
    
                let discounted = finalPricing - finalPricing * (1 - discount/100);
                finalPricing = finalPricing * (1 - discount/100);
                
                // console.log(finalPricing);         
                // Change the validation field
                document.querySelectorAll('.discount-container div')[0].classList.toggle('dn')
                document.querySelectorAll('.discount-container div')[0].classList.toggle('flex')
                document.querySelectorAll('.discount-container div')[1].classList.toggle('dn')
                document.querySelectorAll('.discount-container div')[1].classList.toggle('flex')
             
                // Change the description in the validation field
                document.querySelector('.discount-success > p').innerHTML = `Cupón cargado correctamente! Recibiste un ${discount}% de descuento equivalente a ${formatPrice(discounted)} sobre el total de tu reserva.`

                document.querySelector('#summary-price').innerHTML = formatPrice(finalPricing);
    
    
                document.querySelector('#discount-legend').innerHTML = cupon;
    
                // If cupon is deleted 
    
                document.querySelector('.discount-cupon-success svg').addEventListener('click', ()=> {
                    changeDiscountFields();
                })
    
                
              
                // Change the final number 
                document.querySelector('#discount-final-number').innerHTML = formatPrice(finalPricing);
                document.querySelector('#grand-total').style.textDecoration = 'line-through';
    
    
                // Change for the reservation
                // reserveInfo.aob.price = finalPricing
    
                // Make the final number visibile
                document.querySelector('#discount-final-number').classList.remove('dn');
                document.querySelector('.discount-container').classList.remove('dn')
                document.querySelector('.discount-container').classList.add('flex')
                // Change the 10% in the summary
                document.querySelector('.discount-percentage').innerHTML = matchingProduct.discount + "%" ;


            } else {
                document.querySelector('.discount-code input').style.border = "1px solid red";
            }
    
            console.log(cupon)
        })
    }
    
    discounts();


    const ready2send = () => {
 
        const checkIsReady = (inputElement) => {
            let divClicked = document.querySelector('.is-ready[data-clicked="true"]');
            const inputChecked = inputElement.checked;
            const isReady = divClicked !== null && inputChecked; // Check if divClicked is not null
            console.log('isReady:', isReady);
            return isReady;
        };
        
        const divElements = document.querySelectorAll('.is-ready'); // Use querySelectorAll
        const inputElement = document.querySelector('.terms-container input[type="checkbox"]');
        
        divElements.forEach((d) => {
          d.addEventListener('click', function () {
            if (this.dataset.clicked === 'true') {
                this.dataset.clicked = 'false'; // Toggle the state
            } else {
                this.dataset.clicked = 'true';
            }
            const isReady = checkIsReady(inputElement); 
            
            if (isReady) {
              addMainColorClassToDiv();
            } else {
                const divElement = document.querySelector('.mail-cta');
                divElement.classList.remove('bg-main-color');
              }
          });
        });
        
        inputElement.addEventListener('change', function() {
          const isReady = checkIsReady(inputElement);
        
          if (isReady) {
            addMainColorClassToDiv();
          } else {
            const divElement = document.querySelector('.mail-cta');
            divElement.classList.remove('bg-main-color');
            divElement.classList.add('pointers-none')
          }
        });
        
        function addMainColorClassToDiv() {
          const divElement = document.querySelector('.mail-cta');
          divElement.classList.add('bg-main-color');
          divElement.classList.remove('pointers-none')
        }
        
    }
    ready2send()

    let nextStep = document.querySelector('.advance-step');

    let reserveTitle = {
        0 : 'Para quién es la reserva?',
        1 : 'Elegí las fechas',
        2 : 'Resumen de tu reserva',
        9 : 'Editá tu reserva'
    }

   
    const editReserve = (reserve) => {
        if (new Date(reserve.aob_date_start) > new Date()) {
            isEditing = true;
            
            // Show the pop up
            newReservePop.classList.remove('dn');
            newReservePop.classList.add('flex');

            document.querySelector('#reserve-title-ph').innerHTML = reserveTitle[9];

            // populate the fields with the info of the reservation
            // let dogName = reserve.dog.name;
            let totalPrice = formatPrice(reserve.aob_price);
            const reserveDates =  calculateDates(reserve.aob_date_start, reserve.aob_date_end);
        
            let start = reserveDates.startDate;
            let end = reserveDates.endDate;
            let days = reserveDates.diffDays;
                
            document.querySelector('input[name="start"]').value = start;
            document.querySelector('#summary-start-date').innerHTML = start;
            document.querySelector('.edit-summary-start p').innerHTML = start;
            document.querySelector('input[name="end"]').value = end;
            document.querySelector('#summary-end-date').innerHTML = end;
            document.querySelector('.edit-summary-end p').innerHTML = end;
            document.querySelector('#summary-nights').innerHTML = days + " noches";
            document.querySelector('#summary-price').innerHTML = totalPrice;  
            
            showPrice(price, days, transportFare);


            document.querySelector('.confirm-edit-reserve').addEventListener('click', async () => {
                // make the put request to the server using the reserve._id
                let reserveID = reserve._id;

                let editedInfo = {
                    aob_date_start : enterDateES,
                    aob_date_end : exitDateES,
                    aob_price : finalPricing
                }
                let editedReserve = await fetch (`${url}/reserves-hps/${reserveID}`, {
                    method : 'PUT',
                    headers : {
                        'Content-Type' : 'application/json'
                    },
                    body : JSON.stringify(editedInfo)
                }).then(response => response.json())
                .then(response => {
                    console.log(response);
                    showConfirmation();
                });
            })



        } else {
            alert ('tu reserva ya no se puede editar')
        }


    }
    document.querySelector('#reserve-title-ph').innerHTML = reserveTitle[formReserveStep];

    
    setTimeout(() => {
        document.querySelectorAll('.edit-reserve').forEach(edit => {
            edit.addEventListener('click', async ()=> {
                let reserveID = edit.getAttribute('reserve');
    
                let editedReserve = await fetch (`${url}/reserves-hps/${reserveID}`).then(response => response.json())
                editReserve(editedReserve);
            })
        })
    }, 2000)

    nextStep.addEventListener('click', () => {
            if (formReserveStep <= reserveSteps.length - 1 ) {
                formReserveStep++;
                hasFilled = false;

                console.log(formReserveStep)

                if (isEditing) {
                    // show the reserve summary
                    // nextStep.classList.add('dn');
                    document.querySelector('.reserve-header').classList.add('dn');
                    document.querySelector('.reserve-steps-container').classList.add('dn');
                    document.querySelector('.reserve-header').classList.remove('flex');
                    document.querySelector('.confirm-edit-reserve').classList.remove('dn');

                } else if (formReserveStep >= 2) {
                    nextStep.classList.add('dn');
                }
                //  else {
                //     nextStep.classList.remove('dn');
                // }
            }

            document.querySelector('#reserve-title-ph').innerHTML = reserveTitle[formReserveStep];

            stepsReserve();
    })

    document.querySelectorAll('.btn-prev-hp').forEach(btn => {

        btn.addEventListener('click', ()=> {
            formReserveStep--;
            stepsReserve();
            nextStep.classList.remove('dn');
            document.querySelector('#reserve-title-ph').innerHTML = reserveTitle[formReserveStep];

        })

    })

    document.querySelector('.new-reserve-trigger').addEventListener('click', () => {
        newReservePop.classList.remove('dn');
        newReservePop.classList.add('flex');
    });

}

const sendReserve = async () => {
    document.querySelector('.mail-now-container').addEventListener('click', ()=> {

        let checked = false;
        let terms = document.querySelector('input.terms');
        checked = terms.checked;

   
    
        if (!checked){ 
            alert('por favor, confirmá nuestros términos y condiciones')
        } else {
            
            var raw = JSON.stringify({
                "owner" : user.id,
                "dog" : selectedDog.id,
                "aob_date_start": enterDateES,
                "aob_date_end": exitDateES,
                "aob_price": finalPricing,
                "aob_purchased" : 'consulta', 
                "status" : "Pendiente de pago",
                "tarifa_traslado": transportFare,
                "precio_noche": price,
                "discount_cupon" : `${cupon} [${discount}%]`,
                "discount_amount" : discounted ,
                
                "owner_name": user.first_name,
                "owner_surname": user.last_name,
                "owner_phone": user.phone.toString(),
                "owner_email": user.email,
                "owner_dni": user.dni,
                "owner_address": user.direccion,
                "dog_genre": selectedDog.sex,
                "dog_raza": selectedDog.raza,
                "dog_name": selectedDog.name,
                "dog_age": selectedDog.age,
                
                // "dog_social": reserveInfo.dog.social,            
                // "dog_castrado": reserveInfo.dog.castrado,
                // "date_celo": celoDate,
                // "dog_behaviour": reserveInfo.dog.behaviour,
                // "dog_vaccine": reserveInfo.dog.checkbox11,
                // "dog_deworming": reserveInfo.dog.checkbox12,
                // "aob_price": reserveInfo.aob.price,
                // "aob_purchased": reserveInfo.aob.purchased,
                // "status": reserveInfo.aob.status,
                // "dog_bite": reserveInfo.dog.bite,
                // "dog_swim": reserveInfo.dog.swim,
                // "dog_cirugia": reserveInfo.dog.cirugia,
                // "dog_alergia": reserveInfo.dog.alergia,
                // "dog_food": reserveInfo.dog.food,
                // "dog_comments": reserveInfo.dog.comments,
            });
            
    
            var myHeaders = new Headers();
            myHeaders.append("Content-Type", "application/json");
    
        
            var requestOptions = {
            method: 'POST',
            headers: myHeaders,
            body: raw,
            redirect: 'follow'
            };


            let confirmationPop = document.querySelector('.confirmation-await');
            confirmationPop.classList.remove('dn');
        
    
            fetch("https://u-go-backend-deveop-lc9t2.ondigitalocean.app/reserves-hps", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .then( () => {
              showConfirmation()
            })
            .catch((error) => { 
                alert('Hubo un error en tu solicitud. Vamos a re dirigirte a nuestro Whatsapp para que puedas contactarnos directamente');
                redirectMessage()
                console.log('error', error)
            });
    
        }
    })
}



const showConfirmation = () => {
    document.querySelector('.confirmation-await').classList.add('dn');
    document.querySelector('.reserve-content').classList.add('dn') 
    document.querySelector('.reserve-content').classList.remove('flex') 
    document.querySelector('.message-success').classList.remove('dn') ;
    document.querySelector('.message-success').classList.add('active') ;

    setTimeout(() => {
        window.location.reload();
    }, 5000)
}

const closePopUps = () => {
    let closeReserves = document.querySelector('#close-reserve');
    let closeDog = document.querySelector('#close-dog');

    closeReserves.addEventListener('click', () => {
        document.querySelector('.new-reserve-pop').classList.add('dn');
        document.querySelector('.new-reserve-pop').classList.remove('flex');
    })

    closeDog.addEventListener('click', () => {
        document.querySelector('.new-dog-pop').classList.add('dn');
        document.querySelector('.new-dog-pop').classList.remove('flex');
    })
}


// Initialize the app

if (window.location.pathname === '/portal/') {
    loadUser();
    sendReserve();
    closePopUps();
}

if (window.location.pathname === '/sign-in/') { 
    console.log('signin')
    // Example usage:
    const form = document.querySelector('form');
    if (form) {
    form.addEventListener('submit', async function (event) {
        event.preventDefault();
        const email = document.getElementById('email').value;
        const password = document.getElementById('password').value;
        await logIn(email, password);
        });
    }
}


// Start Helper functions


const calculateDates = (startDate, endDate) => {
    const oneDay = 24 * 60 * 60 * 1000; // One day in milliseconds

    // Convert the English-formatted dates to Date objects
    const startDateObj = new Date(startDate);
    const endDateObj = new Date(endDate);

    startDateObj.setDate(startDateObj.getDate() + 1);
    endDateObj.setDate(endDateObj.getDate() + 1);

    // Calculate the difference in days
    const diffDays = Math.round(Math.abs((endDateObj - startDateObj) / oneDay));

    // Format the dates in Spanish (DD/MM/YYYY)
    const formattedStartDate = formatDate(startDateObj);
    const formattedEndDate = formatDate(endDateObj);

    // Return the formatted dates and the difference in days
    return {
        startDate: formattedStartDate,
        endDate: formattedEndDate,
        diffDays: diffDays
    };
}

function capitalizeFirstLetter(str) {
    return str.replace(/^\w/, (c) => c.toUpperCase());
}

function formatDate(date) {
  const day = String(date.getDate()).padStart(2, '0');
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const year = date.getFullYear();

  return `${day}.${month}`;
}

const formatPrice = (number) => {
    let ars = Intl.NumberFormat("es-AR", {
        style: "currency",
        currency: "ARS",
        decimal: 0,
        maximumSignificantDigits: 3
    });

    return (ars.format(number))
}
